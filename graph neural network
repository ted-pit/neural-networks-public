{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNal0WVJp7BX3k4ky4IuZ3j"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"5bo03D4JooTr","executionInfo":{"status":"ok","timestamp":1670415694820,"user_tz":0,"elapsed":183471,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"fdab10c5-621e-4676-ccb4-b2c2752bff3c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting dmol-book\n","  Downloading dmol_book-1.3.0-py3-none-any.whl (2.4 kB)\n","Collecting mordred[full]\n","  Downloading mordred-1.2.0.tar.gz (128 kB)\n","\u001b[K     |████████████████████████████████| 128 kB 4.6 MB/s \n","\u001b[?25hRequirement already satisfied: tensorflow>=2.7 in /usr/local/lib/python3.8/dist-packages (from dmol-book) (2.9.2)\n","Collecting dm-haiku\n","  Downloading dm_haiku-0.0.9-py3-none-any.whl (352 kB)\n","\u001b[K     |████████████████████████████████| 352 kB 34.2 MB/s \n","\u001b[?25hCollecting tensorflowjs\n","  Downloading tensorflowjs-4.1.0-py3-none-any.whl (84 kB)\n","\u001b[K     |████████████████████████████████| 84 kB 1.5 MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.21.6)\n","Collecting pillow>=8.3.2\n","  Downloading Pillow-9.3.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.2 MB)\n","\u001b[K     |████████████████████████████████| 3.2 MB 39.1 MB/s \n","\u001b[?25hRequirement already satisfied: pydot in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.3.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.8/dist-packages (from dmol-book) (3.2.2)\n","Requirement already satisfied: jax in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.3.25)\n","Requirement already satisfied: jaxlib in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.3.25+cuda11.cudnn805)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.11.2)\n","Collecting emlp==1.0.2\n","  Downloading emlp-1.0.2-py3-none-any.whl (47 kB)\n","\u001b[K     |████████████████████████████████| 47 kB 3.2 MB/s \n","\u001b[?25hCollecting torch==1.12\n","  Downloading torch-1.12.0-cp38-cp38-manylinux1_x86_64.whl (776.3 MB)\n","\u001b[K     |████████████████████████████████| 776.3 MB 10 kB/s \n","\u001b[?25hCollecting MDAnalysis\n","  Downloading MDAnalysis-2.3.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.6 MB)\n","\u001b[K     |████████████████████████████████| 6.6 MB 52.5 MB/s \n","\u001b[?25hCollecting simpletransformers==0.63.9\n","  Downloading simpletransformers-0.63.9-py3-none-any.whl (250 kB)\n","\u001b[K     |████████████████████████████████| 250 kB 14.3 MB/s \n","\u001b[?25hRequirement already satisfied: scikit-learn in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.0.2)\n","Collecting selfies\n","  Downloading selfies-2.1.1-py3-none-any.whl (35 kB)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.7.1)\n","Collecting exmol\n","  Downloading exmol-2.2.0-py3-none-any.whl (4.7 MB)\n","\u001b[K     |████████████████████████████████| 4.7 MB 43.6 MB/s \n","\u001b[?25hRequirement already satisfied: tabulate in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.8.10)\n","Requirement already satisfied: tensorflow-probability in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.17.0)\n","Collecting rdkit>=2022\n","  Downloading rdkit-2022.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (29.3 MB)\n","\u001b[K     |████████████████████████████████| 29.3 MB 1.4 MB/s \n","\u001b[?25hCollecting e3nn\n","  Downloading e3nn-0.5.0-py3-none-any.whl (117 kB)\n","\u001b[K     |████████████████████████████████| 117 kB 28.0 MB/s \n","\u001b[?25hRequirement already satisfied: moviepy in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.2.3.5)\n","Collecting jupyter-book==0.13.1\n","  Downloading jupyter_book-0.13.1-py3-none-any.whl (43 kB)\n","\u001b[K     |████████████████████████████████| 43 kB 1.9 MB/s \n","\u001b[?25hRequirement already satisfied: pandas in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.3.5)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.8/dist-packages (from dmol-book) (2.6.3)\n","Requirement already satisfied: tqdm>=4.38 in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (4.64.1)\n","Collecting plum-dispatch\n","  Downloading plum_dispatch-1.7.4-py3-none-any.whl (24 kB)\n","Requirement already satisfied: pytest in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (3.6.4)\n","Collecting optax\n","  Downloading optax-0.1.4-py3-none-any.whl (154 kB)\n","\u001b[K     |████████████████████████████████| 154 kB 53.9 MB/s \n","\u001b[?25hCollecting sklearn\n","  Downloading sklearn-0.0.post1.tar.gz (3.6 kB)\n","Collecting objax\n","  Downloading objax-1.6.0.tar.gz (57 kB)\n","\u001b[K     |████████████████████████████████| 57 kB 6.2 MB/s \n","\u001b[?25hRequirement already satisfied: h5py in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (3.1.0)\n","Requirement already satisfied: click<9,>=7.1 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (7.1.2)\n","Collecting sphinx-multitoc-numbering~=0.1.3\n","  Downloading sphinx_multitoc_numbering-0.1.3-py3-none-any.whl (4.6 kB)\n","Collecting sphinx-external-toc~=0.2.3\n","  Downloading sphinx_external_toc-0.2.4-py3-none-any.whl (25 kB)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (6.0)\n","Collecting sphinx-comments\n","  Downloading sphinx_comments-0.0.3-py3-none-any.whl (4.6 kB)\n","Collecting sphinx_book_theme~=0.3.2\n","  Downloading sphinx_book_theme-0.3.3-py3-none-any.whl (345 kB)\n","\u001b[K     |████████████████████████████████| 345 kB 57.5 MB/s \n","\u001b[?25hCollecting linkify-it-py~=1.0.1\n","  Downloading linkify_it_py-1.0.3-py3-none-any.whl (19 kB)\n","Collecting jsonschema<4\n","  Downloading jsonschema-3.2.0-py2.py3-none-any.whl (56 kB)\n","\u001b[K     |████████████████████████████████| 56 kB 4.9 MB/s \n","\u001b[?25hCollecting sphinx-jupyterbook-latex~=0.4.6\n","  Downloading sphinx_jupyterbook_latex-0.4.7-py3-none-any.whl (13 kB)\n","Requirement already satisfied: Jinja2 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (2.11.3)\n","Collecting myst-nb~=0.13.1\n","  Downloading myst_nb-0.13.2-py3-none-any.whl (41 kB)\n","\u001b[K     |████████████████████████████████| 41 kB 47 kB/s \n","\u001b[?25hCollecting sphinx_togglebutton\n","  Downloading sphinx_togglebutton-0.3.2-py3-none-any.whl (8.2 kB)\n","Collecting sphinxcontrib-bibtex<=2.5.0,>=2.2.0\n","  Downloading sphinxcontrib_bibtex-2.5.0-py3-none-any.whl (39 kB)\n","Collecting sphinx-copybutton\n","  Downloading sphinx_copybutton-0.5.1-py3-none-any.whl (13 kB)\n","Collecting sphinx<5,>=4\n","  Downloading Sphinx-4.5.0-py3-none-any.whl (3.1 MB)\n","\u001b[K     |████████████████████████████████| 3.1 MB 44.2 MB/s \n","\u001b[?25hRequirement already satisfied: docutils<0.18,>=0.15 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.17.1)\n","Collecting sphinx-design~=0.1.0\n","  Downloading sphinx_design-0.1.0-py3-none-any.whl (1.9 MB)\n","\u001b[K     |████████████████████████████████| 1.9 MB 50.0 MB/s \n","\u001b[?25hCollecting sphinx-thebe~=0.1.1\n","  Downloading sphinx_thebe-0.1.2-py3-none-any.whl (8.3 kB)\n","Collecting wandb>=0.10.32\n","  Downloading wandb-0.13.6-py2.py3-none-any.whl (1.9 MB)\n","\u001b[K     |████████████████████████████████| 1.9 MB 59.2 MB/s \n","\u001b[?25hCollecting sentencepiece\n","  Downloading sentencepiece-0.1.97-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.3 MB)\n","\u001b[K     |████████████████████████████████| 1.3 MB 59.6 MB/s \n","\u001b[?25hCollecting datasets\n","  Downloading datasets-2.7.1-py3-none-any.whl (451 kB)\n","\u001b[K     |████████████████████████████████| 451 kB 62.9 MB/s \n","\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (2.23.0)\n","Collecting transformers>=4.6.0\n","  Downloading transformers-4.25.1-py3-none-any.whl (5.8 MB)\n","\u001b[K     |████████████████████████████████| 5.8 MB 45.5 MB/s \n","\u001b[?25hCollecting streamlit\n","  Downloading streamlit-1.15.2-py2.py3-none-any.whl (9.2 MB)\n","\u001b[K     |████████████████████████████████| 9.2 MB 64.4 MB/s \n","\u001b[?25hRequirement already satisfied: regex in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (2022.6.2)\n","Collecting seqeval\n","  Downloading seqeval-1.2.2.tar.gz (43 kB)\n","\u001b[K     |████████████████████████████████| 43 kB 1.6 MB/s \n","\u001b[?25hCollecting tokenizers\n","  Downloading tokenizers-0.13.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n","\u001b[K     |████████████████████████████████| 7.6 MB 48.6 MB/s \n","\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (1.7.3)\n","Requirement already satisfied: tensorboard in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (2.9.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.8/dist-packages (from torch==1.12->dmol-book) (4.1.1)\n","Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema<4->jupyter-book==0.13.1->dmol-book) (22.1.0)\n","Requirement already satisfied: pyrsistent>=0.14.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema<4->jupyter-book==0.13.1->dmol-book) (0.19.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.8/dist-packages (from jsonschema<4->jupyter-book==0.13.1->dmol-book) (57.4.0)\n","Requirement already satisfied: six>=1.11.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema<4->jupyter-book==0.13.1->dmol-book) (1.15.0)\n","Collecting uc-micro-py\n","  Downloading uc_micro_py-1.0.1-py3-none-any.whl (6.2 kB)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (4.13.0)\n","Requirement already satisfied: ipython in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (7.9.0)\n","Requirement already satisfied: nbconvert<7,>=5.6 in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.6.1)\n","Requirement already satisfied: nbformat~=5.0 in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.7.0)\n","Collecting jupyter-sphinx~=0.3.2\n","  Downloading jupyter_sphinx-0.3.2-py3-none-any.whl (20 kB)\n","Collecting jupyter-cache~=0.4.1\n","  Downloading jupyter_cache-0.4.3-py3-none-any.whl (31 kB)\n","Collecting myst-parser~=0.15.2\n","  Downloading myst_parser-0.15.2-py3-none-any.whl (46 kB)\n","\u001b[K     |████████████████████████████████| 46 kB 4.3 MB/s \n","\u001b[?25hRequirement already satisfied: ipywidgets<8,>=7.0.0 in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (7.7.1)\n","Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.2.0)\n","Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (3.0.3)\n","Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (3.6.1)\n","Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.1.1)\n","Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.3.4)\n","Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.8/dist-packages (from ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (6.0.4)\n","Requirement already satisfied: jupyter-client in /usr/local/lib/python3.8/dist-packages (from ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (6.1.12)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.2.0)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (4.4.2)\n","Requirement already satisfied: pexpect in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (4.8.0)\n","Collecting jedi>=0.10\n","  Downloading jedi-0.18.2-py2.py3-none-any.whl (1.6 MB)\n","\u001b[K     |████████████████████████████████| 1.6 MB 65.0 MB/s \n","\u001b[?25hRequirement already satisfied: prompt-toolkit<2.1.0,>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.0.10)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.6.1)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.7.5)\n","Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.8/dist-packages (from jedi>=0.10->ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.8.3)\n","Collecting nbclient<0.6,>=0.2\n","  Downloading nbclient-0.5.13-py3-none-any.whl (70 kB)\n","\u001b[K     |████████████████████████████████| 70 kB 9.0 MB/s \n","\u001b[?25hRequirement already satisfied: sqlalchemy<1.5,>=1.3.12 in /usr/local/lib/python3.8/dist-packages (from jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.4.44)\n","Collecting nbdime\n","  Downloading nbdime-3.1.1-py2.py3-none-any.whl (5.3 MB)\n","\u001b[K     |████████████████████████████████| 5.3 MB 44.8 MB/s \n","\u001b[?25hCollecting markdown-it-py<2.0.0,>=1.0.0\n","  Downloading markdown_it_py-1.1.0-py3-none-any.whl (83 kB)\n","\u001b[K     |████████████████████████████████| 83 kB 2.4 MB/s \n","\u001b[?25hCollecting mdit-py-plugins~=0.2.8\n","  Downloading mdit_py_plugins-0.2.8-py3-none-any.whl (41 kB)\n","\u001b[K     |████████████████████████████████| 41 kB 40 kB/s \n","\u001b[?25hCollecting attrs>=17.4.0\n","  Downloading attrs-21.4.0-py2.py3-none-any.whl (60 kB)\n","\u001b[K     |████████████████████████████████| 60 kB 7.4 MB/s \n","\u001b[?25hCollecting nest-asyncio\n","  Downloading nest_asyncio-1.5.6-py3-none-any.whl (5.2 kB)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.8/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.8.2)\n","Requirement already satisfied: pyzmq>=13 in /usr/local/lib/python3.8/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (23.2.1)\n","Requirement already satisfied: jupyter-core>=4.6.0 in /usr/local/lib/python3.8/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (4.11.2)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.8.4)\n","Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.4)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.7.1)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.0.1)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.5.0)\n","Requirement already satisfied: testpath in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.6.0)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.8/dist-packages (from Jinja2->jupyter-book==0.13.1->dmol-book) (2.0.1)\n","Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.8/dist-packages (from nbformat~=5.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.16.2)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.8/dist-packages (from prompt-toolkit<2.1.0,>=2.0.0->ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.2.5)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (21.3)\n","Requirement already satisfied: babel>=1.3 in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (2.11.0)\n","Requirement already satisfied: alabaster<0.8,>=0.7 in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (0.7.12)\n","Collecting sphinxcontrib-htmlhelp>=2.0.0\n","  Downloading sphinxcontrib_htmlhelp-2.0.0-py2.py3-none-any.whl (100 kB)\n","\u001b[K     |████████████████████████████████| 100 kB 11.3 MB/s \n","\u001b[?25hRequirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (1.1.5)\n","Requirement already satisfied: snowballstemmer>=1.1 in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (2.2.0)\n","Collecting sphinxcontrib-devhelp\n","  Downloading sphinxcontrib_devhelp-1.0.2-py2.py3-none-any.whl (84 kB)\n","\u001b[K     |████████████████████████████████| 84 kB 3.4 MB/s \n","\u001b[?25hCollecting sphinxcontrib-applehelp\n","  Downloading sphinxcontrib_applehelp-1.0.2-py2.py3-none-any.whl (121 kB)\n","\u001b[K     |████████████████████████████████| 121 kB 61.9 MB/s \n","\u001b[?25hRequirement already satisfied: imagesize in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (1.4.1)\n","Collecting sphinxcontrib-qthelp\n","  Downloading sphinxcontrib_qthelp-1.0.3-py2.py3-none-any.whl (90 kB)\n","\u001b[K     |████████████████████████████████| 90 kB 10.0 MB/s \n","\u001b[?25hCollecting sphinxcontrib-jsmath\n","  Downloading sphinxcontrib_jsmath-1.0.1-py2.py3-none-any.whl (5.1 kB)\n","Requirement already satisfied: pytz>=2015.7 in /usr/local/lib/python3.8/dist-packages (from babel>=1.3->sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (2022.6)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.8/dist-packages (from importlib-metadata->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (3.10.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests->simpletransformers==0.63.9->dmol-book) (2022.9.24)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests->simpletransformers==0.63.9->dmol-book) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests->simpletransformers==0.63.9->dmol-book) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests->simpletransformers==0.63.9->dmol-book) (2.10)\n","Collecting pydata-sphinx-theme~=0.8.0\n","  Downloading pydata_sphinx_theme-0.8.1-py3-none-any.whl (3.3 MB)\n","\u001b[K     |████████████████████████████████| 3.3 MB 54.3 MB/s \n","\u001b[?25hRequirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.8/dist-packages (from pydata-sphinx-theme~=0.8.0->sphinx_book_theme~=0.3.2->jupyter-book==0.13.1->dmol-book) (4.6.3)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.8/dist-packages (from sphinx-jupyterbook-latex~=0.4.6->jupyter-book==0.13.1->dmol-book) (5.10.0)\n","Requirement already satisfied: wheel in /usr/local/lib/python3.8/dist-packages (from sphinx_togglebutton->jupyter-book==0.13.1->dmol-book) (0.38.4)\n","Collecting pybtex>=0.24\n","  Downloading pybtex-0.24.0-py2.py3-none-any.whl (561 kB)\n","\u001b[K     |████████████████████████████████| 561 kB 67.6 MB/s \n","\u001b[?25hCollecting pybtex-docutils>=1.0.0\n","  Downloading pybtex_docutils-1.0.2-py3-none-any.whl (6.3 kB)\n","Collecting latexcodec>=1.0.4\n","  Downloading latexcodec-2.0.1-py2.py3-none-any.whl (18 kB)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.8/dist-packages (from sqlalchemy<1.5,>=1.3.12->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.0.1)\n","Requirement already satisfied: flatbuffers<2,>=1.12 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.12)\n","Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (0.4.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.50.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (0.2.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (3.3.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.6.3)\n","Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (3.19.6)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (14.0.6)\n","Requirement already satisfied: tensorflow-estimator<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (2.9.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (0.28.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.3.0)\n","Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.1.2)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (2.1.1)\n","Requirement already satisfied: keras<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (2.9.0)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.14.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (1.0.1)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (0.4.6)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (3.4.1)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (0.6.1)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (2.14.1)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (1.8.1)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard->simpletransformers==0.63.9->dmol-book) (4.9)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard->simpletransformers==0.63.9->dmol-book) (5.2.0)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard->simpletransformers==0.63.9->dmol-book) (0.2.8)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.8/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard->simpletransformers==0.63.9->dmol-book) (1.3.1)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.8/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard->simpletransformers==0.63.9->dmol-book) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.8/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard->simpletransformers==0.63.9->dmol-book) (3.2.2)\n","Collecting huggingface-hub<1.0,>=0.10.0\n","  Downloading huggingface_hub-0.11.1-py3-none-any.whl (182 kB)\n","\u001b[K     |████████████████████████████████| 182 kB 79.9 MB/s \n","\u001b[?25hRequirement already satisfied: filelock in /usr/local/lib/python3.8/dist-packages (from transformers>=4.6.0->simpletransformers==0.63.9->dmol-book) (3.8.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.8/dist-packages (from packaging->sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (3.0.9)\n","Collecting GitPython>=1.0.0\n","  Downloading GitPython-3.1.29-py3-none-any.whl (182 kB)\n","\u001b[K     |████████████████████████████████| 182 kB 73.5 MB/s \n","\u001b[?25hRequirement already satisfied: promise<3,>=2.0 in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (2.3)\n","Collecting sentry-sdk>=1.0.0\n","  Downloading sentry_sdk-1.11.1-py2.py3-none-any.whl (168 kB)\n","\u001b[K     |████████████████████████████████| 168 kB 63.9 MB/s \n","\u001b[?25hCollecting shortuuid>=0.5.0\n","  Downloading shortuuid-1.0.11-py3-none-any.whl (10 kB)\n","Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (5.4.8)\n","Collecting pathtools\n","  Downloading pathtools-0.1.2.tar.gz (11 kB)\n","Collecting docker-pycreds>=0.4.0\n","  Downloading docker_pycreds-0.4.0-py2.py3-none-any.whl (9.0 kB)\n","Collecting setproctitle\n","  Downloading setproctitle-1.3.2-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (31 kB)\n","Collecting gitdb<5,>=4.0.1\n","  Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)\n","\u001b[K     |████████████████████████████████| 62 kB 1.6 MB/s \n","\u001b[?25hCollecting smmap<6,>=3.0.1\n","  Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n","Collecting sentry-sdk>=1.0.0\n","  Downloading sentry_sdk-1.11.0-py2.py3-none-any.whl (168 kB)\n","\u001b[K     |████████████████████████████████| 168 kB 74.8 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.10.1-py2.py3-none-any.whl (166 kB)\n","\u001b[K     |████████████████████████████████| 166 kB 76.8 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.10.0-py2.py3-none-any.whl (166 kB)\n","\u001b[K     |████████████████████████████████| 166 kB 72.2 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.10-py2.py3-none-any.whl (162 kB)\n","\u001b[K     |████████████████████████████████| 162 kB 63.3 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.9-py2.py3-none-any.whl (162 kB)\n","\u001b[K     |████████████████████████████████| 162 kB 62.4 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.8-py2.py3-none-any.whl (158 kB)\n","\u001b[K     |████████████████████████████████| 158 kB 62.6 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.7-py2.py3-none-any.whl (157 kB)\n","\u001b[K     |████████████████████████████████| 157 kB 58.7 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.6-py2.py3-none-any.whl (157 kB)\n","\u001b[K     |████████████████████████████████| 157 kB 64.2 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.5-py2.py3-none-any.whl (157 kB)\n","\u001b[K     |████████████████████████████████| 157 kB 61.6 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.4-py2.py3-none-any.whl (157 kB)\n","\u001b[K     |████████████████████████████████| 157 kB 50.1 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.3-py2.py3-none-any.whl (157 kB)\n","\u001b[K     |████████████████████████████████| 157 kB 62.6 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.2-py2.py3-none-any.whl (157 kB)\n","\u001b[K     |████████████████████████████████| 157 kB 53.2 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.1-py2.py3-none-any.whl (157 kB)\n","\u001b[K     |████████████████████████████████| 157 kB 75.4 MB/s \n","\u001b[?25h  Downloading sentry_sdk-1.9.0-py2.py3-none-any.whl (156 kB)\n","\u001b[K     |████████████████████████████████| 156 kB 62.9 MB/s \n","\u001b[?25hRequirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.8/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.7.16)\n","Requirement already satisfied: Send2Trash in /usr/local/lib/python3.8/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.8.0)\n","Requirement already satisfied: terminado>=0.8.1 in /usr/local/lib/python3.8/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.13.3)\n","Requirement already satisfied: prometheus-client in /usr/local/lib/python3.8/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.15.0)\n","Requirement already satisfied: ptyprocess in /usr/local/lib/python3.8/dist-packages (from terminado>=0.8.1->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.7.0)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.8/dist-packages (from bleach->nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.5.1)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (3.8.3)\n","Collecting multiprocess\n","  Downloading multiprocess-0.70.14-py38-none-any.whl (132 kB)\n","\u001b[K     |████████████████████████████████| 132 kB 53.5 MB/s \n","\u001b[?25hCollecting responses<0.19\n","  Downloading responses-0.18.0-py3-none-any.whl (38 kB)\n","Requirement already satisfied: fsspec[http]>=2021.11.1 in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (2022.11.0)\n","Collecting xxhash\n","  Downloading xxhash-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (212 kB)\n","\u001b[K     |████████████████████████████████| 212 kB 82.6 MB/s \n","\u001b[?25hRequirement already satisfied: pyarrow>=6.0.0 in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (9.0.0)\n","Requirement already satisfied: dill<0.3.7 in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (0.3.6)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (4.0.2)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (1.3.3)\n","Requirement already satisfied: charset-normalizer<3.0,>=2.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (2.1.1)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (1.8.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (6.0.2)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (1.3.1)\n","Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1\n","  Downloading urllib3-1.25.11-py2.py3-none-any.whl (127 kB)\n","\u001b[K     |████████████████████████████████| 127 kB 53.0 MB/s \n","\u001b[?25hCollecting jmp>=0.0.2\n","  Downloading jmp-0.0.2-py3-none-any.whl (16 kB)\n","Collecting opt-einsum-fx>=0.1.4\n","  Downloading opt_einsum_fx-0.1.4-py3-none-any.whl (13 kB)\n","Collecting importlib-resources\n","  Downloading importlib_resources-5.6.0-py3-none-any.whl (28 kB)\n","Collecting skunk>=0.4.0\n","  Downloading skunk-1.0.0-py3-none-any.whl (6.3 kB)\n","Collecting ratelimit\n","  Downloading ratelimit-2.2.1.tar.gz (5.3 kB)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->dmol-book) (1.4.4)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.8/dist-packages (from matplotlib->dmol-book) (0.11.0)\n","Collecting mmtf-python>=1.0.0\n","  Downloading mmtf_python-1.1.3-py2.py3-none-any.whl (25 kB)\n","Collecting gsd>=1.9.3\n","  Downloading gsd-2.7.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (406 kB)\n","\u001b[K     |████████████████████████████████| 406 kB 53.6 MB/s \n","\u001b[?25hRequirement already satisfied: joblib>=0.12 in /usr/local/lib/python3.8/dist-packages (from MDAnalysis->dmol-book) (1.2.0)\n","Collecting fasteners\n","  Downloading fasteners-0.18-py3-none-any.whl (18 kB)\n","Collecting GridDataFormats>=0.4.0\n","  Downloading GridDataFormats-1.0.1-py3-none-any.whl (2.1 MB)\n","\u001b[K     |████████████████████████████████| 2.1 MB 73.3 MB/s \n","\u001b[?25hRequirement already satisfied: threadpoolctl in /usr/local/lib/python3.8/dist-packages (from MDAnalysis->dmol-book) (3.1.0)\n","Collecting biopython>=1.71\n","  Downloading biopython-1.80-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.1 MB)\n","\u001b[K     |████████████████████████████████| 3.1 MB 36.1 MB/s \n","\u001b[?25hCollecting mrcfile\n","  Downloading mrcfile-1.4.3-py2.py3-none-any.whl (43 kB)\n","\u001b[K     |████████████████████████████████| 43 kB 2.6 MB/s \n","\u001b[?25hRequirement already satisfied: msgpack>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from mmtf-python>=1.0.0->MDAnalysis->dmol-book) (1.0.4)\n","Requirement already satisfied: imageio<3.0,>=2.1.2 in /usr/local/lib/python3.8/dist-packages (from moviepy->dmol-book) (2.9.0)\n","Collecting jupyter-server-mathjax>=0.2.2\n","  Downloading jupyter_server_mathjax-0.2.6-py3-none-any.whl (3.1 MB)\n","\u001b[K     |████████████████████████████████| 3.1 MB 40.3 MB/s \n","\u001b[?25hCollecting jupyter-server\n","  Downloading jupyter_server-2.0.0-py3-none-any.whl (359 kB)\n","\u001b[K     |████████████████████████████████| 359 kB 56.4 MB/s \n","\u001b[?25hCollecting colorama\n","  Downloading colorama-0.4.6-py2.py3-none-any.whl (25 kB)\n","Collecting tornado>=4.2\n","  Downloading tornado-6.2-cp37-abi3-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (423 kB)\n","\u001b[K     |████████████████████████████████| 423 kB 50.0 MB/s \n","\u001b[?25hCollecting anyio<4,>=3.1.0\n","  Downloading anyio-3.6.2-py3-none-any.whl (80 kB)\n","\u001b[K     |████████████████████████████████| 80 kB 9.6 MB/s \n","\u001b[?25hCollecting jupyter-server\n","  Downloading jupyter_server-1.23.3-py3-none-any.whl (346 kB)\n","\u001b[K     |████████████████████████████████| 346 kB 78.3 MB/s \n","\u001b[?25hCollecting argon2-cffi\n","  Downloading argon2_cffi-21.3.0-py3-none-any.whl (14 kB)\n","Collecting jupyter-server\n","  Downloading jupyter_server-1.23.2-py3-none-any.whl (346 kB)\n","\u001b[K     |████████████████████████████████| 346 kB 79.4 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.23.1-py3-none-any.whl (346 kB)\n","\u001b[K     |████████████████████████████████| 346 kB 52.5 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.23.0-py3-none-any.whl (346 kB)\n","\u001b[K     |████████████████████████████████| 346 kB 82.4 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.21.0-py3-none-any.whl (346 kB)\n","\u001b[K     |████████████████████████████████| 346 kB 81.4 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.19.1-py3-none-any.whl (346 kB)\n","\u001b[K     |████████████████████████████████| 346 kB 82.4 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.19.0-py3-none-any.whl (346 kB)\n","\u001b[K     |████████████████████████████████| 346 kB 58.7 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.18.1-py3-none-any.whl (344 kB)\n","\u001b[K     |████████████████████████████████| 344 kB 69.5 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.18.0-py3-none-any.whl (344 kB)\n","\u001b[K     |████████████████████████████████| 344 kB 53.5 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.17.1-py3-none-any.whl (344 kB)\n","\u001b[K     |████████████████████████████████| 344 kB 61.5 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.17.0-py3-none-any.whl (342 kB)\n","\u001b[K     |████████████████████████████████| 342 kB 60.7 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.16.0-py3-none-any.whl (343 kB)\n","\u001b[K     |████████████████████████████████| 343 kB 62.5 MB/s \n","\u001b[?25h  Downloading jupyter_server-1.15.6-py3-none-any.whl (341 kB)\n","\u001b[K     |████████████████████████████████| 341 kB 63.6 MB/s \n","\u001b[?25hCollecting websocket-client\n","  Downloading websocket_client-1.4.2-py3-none-any.whl (55 kB)\n","\u001b[K     |████████████████████████████████| 55 kB 4.1 MB/s \n","\u001b[?25hCollecting sniffio>=1.1\n","  Downloading sniffio-1.3.0-py3-none-any.whl (10 kB)\n","Collecting argon2-cffi-bindings\n","  Downloading argon2_cffi_bindings-21.2.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (86 kB)\n","\u001b[K     |████████████████████████████████| 86 kB 5.7 MB/s \n","\u001b[?25hRequirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from argon2-cffi-bindings->argon2-cffi->jupyter-server->nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.15.1)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.8/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->jupyter-server->nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.21)\n","Collecting parameterized\n","  Downloading parameterized-0.8.1-py2.py3-none-any.whl (26 kB)\n","Collecting chex>=0.1.5\n","  Downloading chex-0.1.5-py3-none-any.whl (85 kB)\n","\u001b[K     |████████████████████████████████| 85 kB 4.8 MB/s \n","\u001b[?25hRequirement already satisfied: dm-tree>=0.1.5 in /usr/local/lib/python3.8/dist-packages (from chex>=0.1.5->optax->emlp==1.0.2->dmol-book) (0.1.7)\n","Requirement already satisfied: toolz>=0.9.0 in /usr/local/lib/python3.8/dist-packages (from chex>=0.1.5->optax->emlp==1.0.2->dmol-book) (0.12.0)\n","Requirement already satisfied: more-itertools>=4.0.0 in /usr/local/lib/python3.8/dist-packages (from pytest->emlp==1.0.2->dmol-book) (9.0.0)\n","Requirement already satisfied: py>=1.5.0 in /usr/local/lib/python3.8/dist-packages (from pytest->emlp==1.0.2->dmol-book) (1.11.0)\n","Requirement already satisfied: pluggy<0.8,>=0.5 in /usr/local/lib/python3.8/dist-packages (from pytest->emlp==1.0.2->dmol-book) (0.7.1)\n","Requirement already satisfied: atomicwrites>=1.0 in /usr/local/lib/python3.8/dist-packages (from pytest->emlp==1.0.2->dmol-book) (1.4.1)\n","Collecting validators>=0.2\n","  Downloading validators-0.20.0.tar.gz (30 kB)\n","Collecting semver\n","  Downloading semver-2.13.0-py2.py3-none-any.whl (12 kB)\n","Requirement already satisfied: altair>=3.2.0 in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (4.2.0)\n","Collecting rich>=10.11.0\n","  Downloading rich-12.6.0-py3-none-any.whl (237 kB)\n","\u001b[K     |████████████████████████████████| 237 kB 45.1 MB/s \n","\u001b[?25hRequirement already satisfied: toml in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (0.10.2)\n","Collecting watchdog\n","  Downloading watchdog-2.2.0-py3-none-manylinux2014_x86_64.whl (78 kB)\n","\u001b[K     |████████████████████████████████| 78 kB 6.7 MB/s \n","\u001b[?25hRequirement already satisfied: tzlocal>=1.1 in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (1.5.1)\n","Collecting pympler>=0.9\n","  Downloading Pympler-1.0.1-py3-none-any.whl (164 kB)\n","\u001b[K     |████████████████████████████████| 164 kB 61.1 MB/s \n","\u001b[?25hCollecting blinker>=1.0.0\n","  Downloading blinker-1.5-py2.py3-none-any.whl (12 kB)\n","Collecting pydeck>=0.1.dev5\n","  Downloading pydeck-0.8.0-py2.py3-none-any.whl (4.7 MB)\n","\u001b[K     |████████████████████████████████| 4.7 MB 29.7 MB/s \n","\u001b[?25hCollecting commonmark<0.10.0,>=0.9.0\n","  Downloading commonmark-0.9.1-py2.py3-none-any.whl (51 kB)\n","\u001b[K     |████████████████████████████████| 51 kB 7.7 MB/s \n","\u001b[?25hRequirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.8/dist-packages (from sympy->dmol-book) (1.2.1)\n","Requirement already satisfied: cloudpickle>=1.3 in /usr/local/lib/python3.8/dist-packages (from tensorflow-probability->dmol-book) (1.5.0)\n","Collecting flax>=0.5.3\n","  Downloading flax-0.6.2-py3-none-any.whl (189 kB)\n","\u001b[K     |████████████████████████████████| 189 kB 47.1 MB/s \n","\u001b[?25hCollecting tensorflowjs\n","  Downloading tensorflowjs-4.0.0-py3-none-any.whl (83 kB)\n","\u001b[K     |████████████████████████████████| 83 kB 2.4 MB/s \n","\u001b[?25h  Downloading tensorflowjs-3.21.0-py3-none-any.whl (81 kB)\n","\u001b[K     |████████████████████████████████| 81 kB 10.2 MB/s \n","\u001b[?25h  Downloading tensorflowjs-3.20.0-py3-none-any.whl (81 kB)\n","\u001b[K     |████████████████████████████████| 81 kB 10.7 MB/s \n","\u001b[?25h  Downloading tensorflowjs-3.19.0-py3-none-any.whl (78 kB)\n","\u001b[K     |████████████████████████████████| 78 kB 7.7 MB/s \n","\u001b[?25hRequirement already satisfied: tensorflow-hub<0.13,>=0.7.0 in /usr/local/lib/python3.8/dist-packages (from tensorflowjs->dmol-book) (0.12.0)\n","  Downloading tensorflowjs-3.18.0-py3-none-any.whl (77 kB)\n","\u001b[K     |████████████████████████████████| 77 kB 6.9 MB/s \n","\u001b[?25hCollecting packaging\n","  Downloading packaging-20.9-py2.py3-none-any.whl (40 kB)\n","\u001b[K     |████████████████████████████████| 40 kB 5.7 MB/s \n","\u001b[?25hBuilding wheels for collected packages: mordred, objax, pathtools, ratelimit, seqeval, sklearn, validators\n","  Building wheel for mordred (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for mordred: filename=mordred-1.2.0-py3-none-any.whl size=176721 sha256=888cea47acecb916209d6b111e5736fbb0f3663cd728f94797a5ebce613b6ae2\n","  Stored in directory: /root/.cache/pip/wheels/20/88/41/5d873c9b55dc7479f0b9951c2161d7b09be193e7228ea27309\n","  Building wheel for objax (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for objax: filename=objax-1.6.0-py3-none-any.whl size=86415 sha256=c789c4bf81ada5b1b1437c2a41266c38d98c6e4e5c82dd397a921dbf4a01f9e3\n","  Stored in directory: /root/.cache/pip/wheels/4a/85/b0/9169f869208ce0555d8a61a4903f2fc61181133d4bc4ef855c\n","  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pathtools: filename=pathtools-0.1.2-py3-none-any.whl size=8806 sha256=ef6920a5dc7640b2a0a4fc3c5b05a208de8914a23dd98399a90c7f715497f49c\n","  Stored in directory: /root/.cache/pip/wheels/4c/8e/7e/72fbc243e1aeecae64a96875432e70d4e92f3d2d18123be004\n","  Building wheel for ratelimit (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for ratelimit: filename=ratelimit-2.2.1-py3-none-any.whl size=5909 sha256=e3ce6b0cf9cfa5831d8720bb5b7ef3083ae9c3fe0d529c043fb8fd3c497e2220\n","  Stored in directory: /root/.cache/pip/wheels/8e/34/5e/1dd3d652594bdf5df01109a683a455121d0b726978051bf720\n","  Building wheel for seqeval (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for seqeval: filename=seqeval-1.2.2-py3-none-any.whl size=16179 sha256=cca7ded1b4fadf227a5de99cdf5edcc6cab2315f4cee73300f6aba002dca0dcf\n","  Stored in directory: /root/.cache/pip/wheels/ad/5c/ba/05fa33fa5855777b7d686e843ec07452f22a66a138e290e732\n","  Building wheel for sklearn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for sklearn: filename=sklearn-0.0.post1-py3-none-any.whl size=2344 sha256=a5837cce98563e0fb088acbab2441f2f78bf3374e450444240958fa60211cb50\n","  Stored in directory: /root/.cache/pip/wheels/14/25/f7/1cc0956978ae479e75140219088deb7a36f60459df242b1a72\n","  Building wheel for validators (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for validators: filename=validators-0.20.0-py3-none-any.whl size=19581 sha256=c964dac7c82f0c7cc2f7cdb20d3828ffefdc056d462c89f7f557424c00f46ebb\n","  Stored in directory: /root/.cache/pip/wheels/19/09/72/3eb74d236bb48bd0f3c6c3c83e4e0c5bbfcbcad7c6c3539db8\n","Successfully built mordred objax pathtools ratelimit seqeval sklearn validators\n","Installing collected packages: attrs, tornado, jsonschema, jedi, sniffio, argon2-cffi-bindings, websocket-client, urllib3, smmap, packaging, argon2-cffi, anyio, jupyter-server, gitdb, sphinxcontrib-qthelp, sphinxcontrib-jsmath, sphinxcontrib-htmlhelp, sphinxcontrib-devhelp, sphinxcontrib-applehelp, nest-asyncio, markdown-it-py, latexcodec, jupyter-server-mathjax, GitPython, colorama, sphinx, pybtex, nbdime, nbclient, mdit-py-plugins, commonmark, xxhash, watchdog, validators, uc-micro-py, torch, tokenizers, sphinx-togglebutton, shortuuid, setproctitle, sentry-sdk, semver, rich, responses, pympler, pydeck, pydata-sphinx-theme, pybtex-docutils, pillow, pathtools, parameterized, myst-parser, multiprocess, mrcfile, jupyter-sphinx, jupyter-cache, importlib-resources, huggingface-hub, docker-pycreds, chex, blinker, wandb, transformers, streamlit, sphinxcontrib-bibtex, sphinx-thebe, sphinx-multitoc-numbering, sphinx-jupyterbook-latex, sphinx-external-toc, sphinx-design, sphinx-copybutton, sphinx-comments, sphinx-book-theme, skunk, sklearn, seqeval, sentencepiece, selfies, rdkit, ratelimit, plum-dispatch, optax, opt-einsum-fx, objax, myst-nb, mordred, mmtf-python, linkify-it-py, jmp, gsd, GridDataFormats, fasteners, datasets, biopython, tensorflowjs, simpletransformers, MDAnalysis, jupyter-book, exmol, emlp, e3nn, dm-haiku, dmol-book\n","  Attempting uninstall: attrs\n","    Found existing installation: attrs 22.1.0\n","    Uninstalling attrs-22.1.0:\n","      Successfully uninstalled attrs-22.1.0\n","  Attempting uninstall: tornado\n","    Found existing installation: tornado 6.0.4\n","    Uninstalling tornado-6.0.4:\n","      Successfully uninstalled tornado-6.0.4\n","  Attempting uninstall: jsonschema\n","    Found existing installation: jsonschema 4.3.3\n","    Uninstalling jsonschema-4.3.3:\n","      Successfully uninstalled jsonschema-4.3.3\n","  Attempting uninstall: urllib3\n","    Found existing installation: urllib3 1.24.3\n","    Uninstalling urllib3-1.24.3:\n","      Successfully uninstalled urllib3-1.24.3\n","  Attempting uninstall: packaging\n","    Found existing installation: packaging 21.3\n","    Uninstalling packaging-21.3:\n","      Successfully uninstalled packaging-21.3\n","  Attempting uninstall: sphinx\n","    Found existing installation: Sphinx 1.8.6\n","    Uninstalling Sphinx-1.8.6:\n","      Successfully uninstalled Sphinx-1.8.6\n","  Attempting uninstall: torch\n","    Found existing installation: torch 1.12.1+cu113\n","    Uninstalling torch-1.12.1+cu113:\n","      Successfully uninstalled torch-1.12.1+cu113\n","  Attempting uninstall: pillow\n","    Found existing installation: Pillow 7.1.2\n","    Uninstalling Pillow-7.1.2:\n","      Successfully uninstalled Pillow-7.1.2\n","  Attempting uninstall: importlib-resources\n","    Found existing installation: importlib-resources 5.10.0\n","    Uninstalling importlib-resources-5.10.0:\n","      Successfully uninstalled importlib-resources-5.10.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","torchvision 0.13.1+cu113 requires torch==1.12.1, but you have torch 1.12.0 which is incompatible.\n","torchtext 0.13.1 requires torch==1.12.1, but you have torch 1.12.0 which is incompatible.\n","torchaudio 0.12.1+cu113 requires torch==1.12.1, but you have torch 1.12.0 which is incompatible.\n","google-colab 1.0.0 requires tornado~=6.0.4, but you have tornado 6.2 which is incompatible.\u001b[0m\n","Successfully installed GitPython-3.1.29 GridDataFormats-1.0.1 MDAnalysis-2.3.0 anyio-3.6.2 argon2-cffi-21.3.0 argon2-cffi-bindings-21.2.0 attrs-21.4.0 biopython-1.80 blinker-1.5 chex-0.1.5 colorama-0.4.6 commonmark-0.9.1 datasets-2.7.1 dm-haiku-0.0.9 dmol-book-1.3.0 docker-pycreds-0.4.0 e3nn-0.5.0 emlp-1.0.2 exmol-2.2.0 fasteners-0.18 gitdb-4.0.10 gsd-2.7.0 huggingface-hub-0.11.1 importlib-resources-5.6.0 jedi-0.18.2 jmp-0.0.2 jsonschema-3.2.0 jupyter-book-0.13.1 jupyter-cache-0.4.3 jupyter-server-1.15.6 jupyter-server-mathjax-0.2.6 jupyter-sphinx-0.3.2 latexcodec-2.0.1 linkify-it-py-1.0.3 markdown-it-py-1.1.0 mdit-py-plugins-0.2.8 mmtf-python-1.1.3 mordred-1.2.0 mrcfile-1.4.3 multiprocess-0.70.14 myst-nb-0.13.2 myst-parser-0.15.2 nbclient-0.5.13 nbdime-3.1.1 nest-asyncio-1.5.6 objax-1.6.0 opt-einsum-fx-0.1.4 optax-0.1.4 packaging-20.9 parameterized-0.8.1 pathtools-0.1.2 pillow-9.3.0 plum-dispatch-1.7.4 pybtex-0.24.0 pybtex-docutils-1.0.2 pydata-sphinx-theme-0.8.1 pydeck-0.8.0 pympler-1.0.1 ratelimit-2.2.1 rdkit-2022.9.2 responses-0.18.0 rich-12.6.0 selfies-2.1.1 semver-2.13.0 sentencepiece-0.1.97 sentry-sdk-1.9.0 seqeval-1.2.2 setproctitle-1.3.2 shortuuid-1.0.11 simpletransformers-0.63.9 sklearn-0.0.post1 skunk-1.0.0 smmap-5.0.0 sniffio-1.3.0 sphinx-4.5.0 sphinx-book-theme-0.3.3 sphinx-comments-0.0.3 sphinx-copybutton-0.5.1 sphinx-design-0.1.0 sphinx-external-toc-0.2.4 sphinx-jupyterbook-latex-0.4.7 sphinx-multitoc-numbering-0.1.3 sphinx-thebe-0.1.2 sphinx-togglebutton-0.3.2 sphinxcontrib-applehelp-1.0.2 sphinxcontrib-bibtex-2.5.0 sphinxcontrib-devhelp-1.0.2 sphinxcontrib-htmlhelp-2.0.0 sphinxcontrib-jsmath-1.0.1 sphinxcontrib-qthelp-1.0.3 streamlit-1.15.2 tensorflowjs-3.18.0 tokenizers-0.13.2 torch-1.12.0 tornado-6.2 transformers-4.25.1 uc-micro-py-1.0.1 urllib3-1.25.11 validators-0.20.0 wandb-0.13.6 watchdog-2.2.0 websocket-client-1.4.2 xxhash-3.1.0\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["PIL","sphinxcontrib","tornado"]}}},"metadata":{}}],"source":["!pip install dmol-book"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import matplotlib as mpl\n","import numpy as np\n","import tensorflow as tf\n","import pandas as pd\n","import rdkit, rdkit.Chem, rdkit.Chem.rdDepictor, rdkit.Chem.Draw\n","import networkx as nx\n","import dmol\n","\n","soldata = pd.read_csv(\n","    \"https://github.com/whitead/dmol-book/raw/master/data/curated-solubility-dataset.csv\"\n",")\n","soldata.head()"],"metadata":{"id":"53z3JmqPrUha","colab":{"base_uri":"https://localhost:8080/","height":386},"executionInfo":{"status":"ok","timestamp":1670415736331,"user_tz":0,"elapsed":11183,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"d50fb378-392a-44d5-d9fb-a098c348254b"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    ID                                               Name  \\\n","0  A-3         N,N,N-trimethyloctadecan-1-aminium bromide   \n","1  A-4                           Benzo[cd]indol-2(1H)-one   \n","2  A-5                               4-chlorobenzaldehyde   \n","3  A-8  zinc bis[2-hydroxy-3,5-bis(1-phenylethyl)benzo...   \n","4  A-9  4-({4-[bis(oxiran-2-ylmethyl)amino]phenyl}meth...   \n","\n","                                               InChI  \\\n","0  InChI=1S/C21H46N.BrH/c1-5-6-7-8-9-10-11-12-13-...   \n","1  InChI=1S/C11H7NO/c13-11-8-5-1-3-7-4-2-6-9(12-1...   \n","2        InChI=1S/C7H5ClO/c8-7-3-1-6(5-9)2-4-7/h1-5H   \n","3  InChI=1S/2C23H22O3.Zn/c2*1-15(17-9-5-3-6-10-17...   \n","4  InChI=1S/C25H30N2O4/c1-5-20(26(10-22-14-28-22)...   \n","\n","                      InChIKey  \\\n","0  SZEMGTQCPRNXEG-UHFFFAOYSA-M   \n","1  GPYLCFQEKPUWLD-UHFFFAOYSA-N   \n","2  AVPYQKSLYISFPO-UHFFFAOYSA-N   \n","3  XTUPUYCJWKHGSW-UHFFFAOYSA-L   \n","4  FAUAZXVRLVIARB-UHFFFAOYSA-N   \n","\n","                                              SMILES  Solubility   SD  \\\n","0                [Br-].CCCCCCCCCCCCCCCCCC[N+](C)(C)C   -3.616127  0.0   \n","1                               O=C1Nc2cccc3cccc1c23   -3.254767  0.0   \n","2                                    Clc1ccc(C=O)cc1   -2.177078  0.0   \n","3  [Zn++].CC(c1ccccc1)c2cc(C(C)c3ccccc3)c(O)c(c2)...   -3.924409  0.0   \n","4  C1OC1CN(CC2CO2)c3ccc(Cc4ccc(cc4)N(CC5CO5)CC6CO...   -4.662065  0.0   \n","\n","   Ocurrences Group    MolWt  ...  NumRotatableBonds  NumValenceElectrons  \\\n","0           1    G1  392.510  ...               17.0                142.0   \n","1           1    G1  169.183  ...                0.0                 62.0   \n","2           1    G1  140.569  ...                1.0                 46.0   \n","3           1    G1  756.226  ...               10.0                264.0   \n","4           1    G1  422.525  ...               12.0                164.0   \n","\n","   NumAromaticRings  NumSaturatedRings  NumAliphaticRings  RingCount    TPSA  \\\n","0               0.0                0.0                0.0        0.0    0.00   \n","1               2.0                0.0                1.0        3.0   29.10   \n","2               1.0                0.0                0.0        1.0   17.07   \n","3               6.0                0.0                0.0        6.0  120.72   \n","4               2.0                4.0                4.0        6.0   56.60   \n","\n","    LabuteASA      BalabanJ      BertzCT  \n","0  158.520601  0.000000e+00   210.377334  \n","1   75.183563  2.582996e+00   511.229248  \n","2   58.261134  3.009782e+00   202.661065  \n","3  323.755434  2.322963e-07  1964.648666  \n","4  183.183268  1.084427e+00   769.899934  \n","\n","[5 rows x 26 columns]"],"text/html":["\n","  <div id=\"df-706110e4-1764-40a2-8b08-af7983c4f243\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Name</th>\n","      <th>InChI</th>\n","      <th>InChIKey</th>\n","      <th>SMILES</th>\n","      <th>Solubility</th>\n","      <th>SD</th>\n","      <th>Ocurrences</th>\n","      <th>Group</th>\n","      <th>MolWt</th>\n","      <th>...</th>\n","      <th>NumRotatableBonds</th>\n","      <th>NumValenceElectrons</th>\n","      <th>NumAromaticRings</th>\n","      <th>NumSaturatedRings</th>\n","      <th>NumAliphaticRings</th>\n","      <th>RingCount</th>\n","      <th>TPSA</th>\n","      <th>LabuteASA</th>\n","      <th>BalabanJ</th>\n","      <th>BertzCT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A-3</td>\n","      <td>N,N,N-trimethyloctadecan-1-aminium bromide</td>\n","      <td>InChI=1S/C21H46N.BrH/c1-5-6-7-8-9-10-11-12-13-...</td>\n","      <td>SZEMGTQCPRNXEG-UHFFFAOYSA-M</td>\n","      <td>[Br-].CCCCCCCCCCCCCCCCCC[N+](C)(C)C</td>\n","      <td>-3.616127</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>392.510</td>\n","      <td>...</td>\n","      <td>17.0</td>\n","      <td>142.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>158.520601</td>\n","      <td>0.000000e+00</td>\n","      <td>210.377334</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A-4</td>\n","      <td>Benzo[cd]indol-2(1H)-one</td>\n","      <td>InChI=1S/C11H7NO/c13-11-8-5-1-3-7-4-2-6-9(12-1...</td>\n","      <td>GPYLCFQEKPUWLD-UHFFFAOYSA-N</td>\n","      <td>O=C1Nc2cccc3cccc1c23</td>\n","      <td>-3.254767</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>169.183</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>62.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>29.10</td>\n","      <td>75.183563</td>\n","      <td>2.582996e+00</td>\n","      <td>511.229248</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A-5</td>\n","      <td>4-chlorobenzaldehyde</td>\n","      <td>InChI=1S/C7H5ClO/c8-7-3-1-6(5-9)2-4-7/h1-5H</td>\n","      <td>AVPYQKSLYISFPO-UHFFFAOYSA-N</td>\n","      <td>Clc1ccc(C=O)cc1</td>\n","      <td>-2.177078</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>140.569</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>46.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>17.07</td>\n","      <td>58.261134</td>\n","      <td>3.009782e+00</td>\n","      <td>202.661065</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>A-8</td>\n","      <td>zinc bis[2-hydroxy-3,5-bis(1-phenylethyl)benzo...</td>\n","      <td>InChI=1S/2C23H22O3.Zn/c2*1-15(17-9-5-3-6-10-17...</td>\n","      <td>XTUPUYCJWKHGSW-UHFFFAOYSA-L</td>\n","      <td>[Zn++].CC(c1ccccc1)c2cc(C(C)c3ccccc3)c(O)c(c2)...</td>\n","      <td>-3.924409</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>756.226</td>\n","      <td>...</td>\n","      <td>10.0</td>\n","      <td>264.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>6.0</td>\n","      <td>120.72</td>\n","      <td>323.755434</td>\n","      <td>2.322963e-07</td>\n","      <td>1964.648666</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>A-9</td>\n","      <td>4-({4-[bis(oxiran-2-ylmethyl)amino]phenyl}meth...</td>\n","      <td>InChI=1S/C25H30N2O4/c1-5-20(26(10-22-14-28-22)...</td>\n","      <td>FAUAZXVRLVIARB-UHFFFAOYSA-N</td>\n","      <td>C1OC1CN(CC2CO2)c3ccc(Cc4ccc(cc4)N(CC5CO5)CC6CO...</td>\n","      <td>-4.662065</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>422.525</td>\n","      <td>...</td>\n","      <td>12.0</td>\n","      <td>164.0</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>6.0</td>\n","      <td>56.60</td>\n","      <td>183.183268</td>\n","      <td>1.084427e+00</td>\n","      <td>769.899934</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 26 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-706110e4-1764-40a2-8b08-af7983c4f243')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-706110e4-1764-40a2-8b08-af7983c4f243 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-706110e4-1764-40a2-8b08-af7983c4f243');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["np.random.seed(0)\n","my_elements = {6: \"C\", 8: \"O\", 1: \"H\"}\n","def smiles2graph(sml): ## Generate graph from Smiles data in dataset\n","    m = rdkit.Chem.MolFromSmiles(sml)\n","    m = rdkit.Chem.AddHs(m)\n","    order_string = {\n","        rdkit.Chem.rdchem.BondType.SINGLE: 1,\n","        rdkit.Chem.rdchem.BondType.DOUBLE: 2,\n","        rdkit.Chem.rdchem.BondType.TRIPLE: 3,\n","        rdkit.Chem.rdchem.BondType.AROMATIC: 4,\n","    }\n","    N = len(list(m.GetAtoms()))\n","    nodes = np.zeros((N, len(my_elements)))\n","    lookup = list(my_elements.keys())\n","    for i in m.GetAtoms():\n","        nodes[i.GetIdx(), lookup.index(i.GetAtomicNum())] = 1\n","\n","    adj = np.zeros((N, N, 5))\n","    for j in m.GetBonds():\n","        u = min(j.GetBeginAtomIdx(), j.GetEndAtomIdx())\n","        v = max(j.GetBeginAtomIdx(), j.GetEndAtomIdx())\n","        order = j.GetBondType()\n","        if order in order_string:\n","            order = order_string[order]\n","        else:\n","            raise Warning(\"Ignoring bond order\" + order)\n","        adj[u, v, order] = 1\n","        adj[v, u, order] = 1\n","    return nodes, adj\n","\n","def gen_smiles2graph(sml):\n","    m = rdkit.Chem.MolFromSmiles(sml)\n","    m = rdkit.Chem.AddHs(m)\n","    order_string = {\n","        rdkit.Chem.rdchem.BondType.SINGLE: 1,\n","        rdkit.Chem.rdchem.BondType.DOUBLE: 2,\n","        rdkit.Chem.rdchem.BondType.TRIPLE: 3,\n","        rdkit.Chem.rdchem.BondType.AROMATIC: 4,\n","    }\n","    N = len(list(m.GetAtoms()))\n","    nodes = np.zeros((N, 100))\n","    for i in m.GetAtoms():\n","        nodes[i.GetIdx(), i.GetAtomicNum()] = 1\n","\n","    adj = np.zeros((N, N))\n","    for j in m.GetBonds():\n","        u = min(j.GetBeginAtomIdx(), j.GetEndAtomIdx())\n","        v = max(j.GetBeginAtomIdx(), j.GetEndAtomIdx())\n","        order = j.GetBondType()\n","        if order in order_string:\n","            order = order_string[order]\n","        else:\n","            raise Warning(\"Ignoring bond order\" + order)\n","        adj[u, v] = 1\n","        adj[v, u] = 1\n","    adj += np.eye(N)\n","    return nodes, adj\n","\n","class GCNLayer(tf.keras.layers.Layer):  ## Graph Convolution Network definition\n","    def __init__(self, activation=None, **kwargs):\n","        super(GCNLayer, self).__init__(**kwargs)\n","        self.activation = tf.keras.activations.get(activation)\n","\n","    def build(self, input_shape):\n","        # create trainable weights\n","        node_shape, adj_shape = input_shape\n","        self.w = self.add_weight(shape=(node_shape[2], node_shape[2]), name=\"w\")\n","\n","    def call(self, inputs):\n","        # split input into nodes, adj\n","        nodes, adj = inputs\n","        # compute degree\n","        degree = tf.reduce_sum(adj, axis=-1)\n","        # GCN equation\n","        new_nodes = tf.einsum(\"bi,bij,bjk,kl->bil\", 1 / degree, adj, nodes, self.w)\n","        out = self.activation(new_nodes)\n","        return out, adj\n","\n","class GRLayer(tf.keras.layers.Layer): ##  Layer than computes mean over node features\n","    def __init__(self, name=\"GRLayer\", **kwargs):\n","        super(GRLayer, self).__init__(name=name, **kwargs)\n","\n","    def call(self, inputs):\n","        nodes, adj = inputs\n","        reduction = tf.reduce_mean(nodes, axis=1)\n","        return reduction\n"],"metadata":{"id":"ITGbcuWhrq2O","executionInfo":{"status":"ok","timestamp":1670415761323,"user_tz":0,"elapsed":4,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["ninput = tf.keras.Input((None,100,))\n","ainput = tf.keras.Input((None,None,))\n","\n","x = GCNLayer(\"relu\")([ninput, ainput])\n","x = GCNLayer(\"relu\")(x)\n","x = GCNLayer(\"relu\")(x)\n","x = GCNLayer(\"relu\")(x)\n","# reduce to graph features\n","x = GRLayer()(x)\n","# standard layers (the readout)\n","x = tf.keras.layers.Dense(64, \"relu\")(x)\n","x = tf.keras.layers.Dense(32, \"relu\")(x)\n","x = tf.keras.layers.Dense(32, \"relu\")(x)\n","x = tf.keras.layers.Dense(12, \"relu\")(x)\n","x = tf.keras.layers.Dense(1)(x)\n","model = tf.keras.Model(inputs=(ninput, ainput), outputs=x)\n","model.summary()"],"metadata":{"id":"b55i_BtsubmN","executionInfo":{"status":"ok","timestamp":1670415814956,"user_tz":0,"elapsed":1922,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"42d26f7d-9233-462f-862b-1cce109af04b"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_1\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_3 (InputLayer)           [(None, None, 100)]  0           []                               \n","                                                                                                  \n"," input_4 (InputLayer)           [(None, None, None)  0           []                               \n","                                ]                                                                 \n","                                                                                                  \n"," gcn_layer_4 (GCNLayer)         ((None, None, 100),  10000       ['input_3[0][0]',                \n","                                 (None, None, None)               'input_4[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," gcn_layer_5 (GCNLayer)         ((None, None, 100),  10000       ['gcn_layer_4[0][0]',            \n","                                 (None, None, None)               'gcn_layer_4[0][1]']            \n","                                )                                                                 \n","                                                                                                  \n"," gcn_layer_6 (GCNLayer)         ((None, None, 100),  10000       ['gcn_layer_5[0][0]',            \n","                                 (None, None, None)               'gcn_layer_5[0][1]']            \n","                                )                                                                 \n","                                                                                                  \n"," gcn_layer_7 (GCNLayer)         ((None, None, 100),  10000       ['gcn_layer_6[0][0]',            \n","                                 (None, None, None)               'gcn_layer_6[0][1]']            \n","                                )                                                                 \n","                                                                                                  \n"," GRLayer (GRLayer)              (None, 100)          0           ['gcn_layer_7[0][0]',            \n","                                                                  'gcn_layer_7[0][1]']            \n","                                                                                                  \n"," dense_2 (Dense)                (None, 64)           6464        ['GRLayer[0][0]']                \n","                                                                                                  \n"," dense_3 (Dense)                (None, 32)           2080        ['dense_2[0][0]']                \n","                                                                                                  \n"," dense_4 (Dense)                (None, 32)           1056        ['dense_3[0][0]']                \n","                                                                                                  \n"," dense_5 (Dense)                (None, 12)           396         ['dense_4[0][0]']                \n","                                                                                                  \n"," dense_6 (Dense)                (None, 1)            13          ['dense_5[0][0]']                \n","                                                                                                  \n","==================================================================================================\n","Total params: 50,009\n","Trainable params: 50,009\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["## Preparing data\n","def gen():   ## generate graphs and labels\n","    for i in range(len(soldata)):\n","        graph = gen_smiles2graph(soldata.SMILES[i])\n","        sol = soldata.Solubility[i]\n","        yield graph, sol\n","\n","data = tf.data.Dataset.from_generator(gen, output_types=((tf.float32, tf.float32), tf.float32),\n","    output_shapes=((tf.TensorShape([None, 100]), tf.TensorShape([None, None])), tf.TensorShape([]), ),)\n","\n","test_data = data.take(200)\n","val_data = data.skip(200).take(200)\n","train_data = data.skip(400)"],"metadata":{"id":"NIbQKBV9vB2E","executionInfo":{"status":"ok","timestamp":1670415823686,"user_tz":0,"elapsed":787,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["model.compile(\"Nadam\", loss=\"mean_squared_error\")\n","result = model.fit(train_data.batch(1), validation_data=val_data.batch(1), epochs=16)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4HbYmRv4wtni","executionInfo":{"status":"ok","timestamp":1670419703911,"user_tz":0,"elapsed":1914507,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"8fb84731-d985-485b-eddc-dffa7a256572"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/16\n","9582/9582 [==============================] - 106s 11ms/step - loss: 1.2899 - val_loss: 2.1218\n","Epoch 2/16\n","9582/9582 [==============================] - 90s 9ms/step - loss: 1.3051 - val_loss: 2.1908\n","Epoch 3/16\n","9582/9582 [==============================] - 90s 9ms/step - loss: 1.3073 - val_loss: 2.0954\n","Epoch 4/16\n","9582/9582 [==============================] - 89s 9ms/step - loss: 1.3168 - val_loss: 2.5371\n","Epoch 5/16\n","9582/9582 [==============================] - 87s 9ms/step - loss: 1.3333 - val_loss: 2.3119\n","Epoch 6/16\n","9582/9582 [==============================] - 87s 9ms/step - loss: 1.2840 - val_loss: 2.5082\n","Epoch 7/16\n","9582/9582 [==============================] - 91s 9ms/step - loss: 1.2714 - val_loss: 2.3432\n","Epoch 8/16\n","9582/9582 [==============================] - 93s 10ms/step - loss: 1.2262 - val_loss: 2.4164\n","Epoch 9/16\n","9582/9582 [==============================] - 97s 10ms/step - loss: 1.2286 - val_loss: 2.4797\n","Epoch 10/16\n","9582/9582 [==============================] - 96s 10ms/step - loss: 1.2302 - val_loss: 2.2776\n","Epoch 11/16\n","9582/9582 [==============================] - 99s 10ms/step - loss: 1.2593 - val_loss: 2.5317\n","Epoch 12/16\n","9582/9582 [==============================] - 97s 10ms/step - loss: 1.2448 - val_loss: 2.2054\n","Epoch 13/16\n","9582/9582 [==============================] - 105s 11ms/step - loss: 1.2137 - val_loss: 2.2231\n","Epoch 14/16\n","9582/9582 [==============================] - 108s 11ms/step - loss: 1.2355 - val_loss: 2.0783\n","Epoch 15/16\n","9582/9582 [==============================] - 100s 10ms/step - loss: 1.2372 - val_loss: 2.2754\n","Epoch 16/16\n","9582/9582 [==============================] - 92s 9ms/step - loss: 1.2090 - val_loss: 2.0045\n"]}]},{"cell_type":"code","source":["plt.plot(result.history[\"loss\"], label=\"training\")\n","plt.plot(result.history[\"val_loss\"], label=\"validation\")\n","plt.legend()\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Loss\")\n","plt.show()\n","yhat = model.predict(test_data.batch(1), verbose=0)[:, 0]\n","test_y = [y for x, y in test_data]\n","plt.figure()\n","plt.plot(test_y, test_y, \"-\")\n","plt.plot(test_y, yhat, \".\")\n","plt.text(\n","    min(test_y) + 1,\n","    max(test_y) - 2,\n","    f\"correlation = {np.corrcoef(test_y, yhat)[0,1]:.3f}\",\n",")\n","plt.text(\n","    min(test_y) + 1,\n","    max(test_y) - 3,\n","    f\"loss = {np.sqrt(np.mean((test_y - yhat)**2)):.3f}\",\n",")\n","plt.title(\"Testing Data\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ybSrypmEKGXN","executionInfo":{"status":"ok","timestamp":1670419865510,"user_tz":0,"elapsed":5906,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"dddfae55-697e-4ddd-d0d0-92c553673efd"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 900x692.308 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 900x692.308 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAyMAAAKWCAYAAABao0a3AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAewgAAHsIBbtB1PgAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdeVwU5R8H8M/ucq4KcokgnngkWopmoXlrXlkeeaep2WGpv04tM7PySiy10tSy8KzUvM3UzPsWUfNATZQbQUBQYbl25/cHMbKys8xy7AGf9+u1L3dmnnnmmd1ZnO88l0IQBAFERERERERmprR0AYiIiIiIqHJiMEJERERERBbBYISIiIiIiCyCwQgREREREVkEgxEiIiIiIrIIBiNERERERGQRDEaIiIiIiMgiGIwQEREREZFFMBghIiIiIiKLYDBCREREREQWwWCEiIiIiIgsgsEIERERERFZBIMRIiIiIiKyCAYjRERERERkEQxGiIiIiIjIIhiMEBERERGRRTAYISIiIiIii2AwQkREREREFsFghIiIiIiILILBCBERERERWQSDESIi0iMIAgYPHoyqVatCrVaja9euyMzMtHSxiIioAlIIgiBYuhBERGQ94uLi4Ofnp7fu2LFjaNeunYVKREREFRVrRoiISE9ubm6RdTk5ORYoCRERVXR2li4AEREZtmPHDly+fBnPPPMMOnToYOniEFkUfw9EFRODESIyyf379xEUFIQrV66UWZ4KhQIdOnTAgQMHoFSywhYArl69ihdeeAEA4ODggOTkZFSrVs0sx7a3ty+yzsHBwSzHJmmCIKBbt244ePAg5LawdnR0hJubG5o0aYJ27dphyJAhaNmyZTmXtOxZ8vdAROWL/+sTkUkuXrxYpoEIkH+TdfjwYdy+fbtM87VlhT+LnJwcpKammu3Yvr6+GDBgANRqNZycnNCpUyebvIGtaBITE3HgwAHZgQgAZGdn4/bt2zh06BDmzp2LwMBAdO/eHefPny/HkpY9S/4eiKh8MRghIpOUZ98B9kuQZs6xRhQKBTZv3oyMjAxoNBocPHgQarXabMcnw1xdXeHk5FTqfP7++288/fTT+P7778ugVJbBsXeIKg420yKiUpk+fTrc3d2LrF+8eDEiIiIAAG3atMGIESOKpLlx4waWLFlS7mUkqgic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\n"},"metadata":{}}]}]}