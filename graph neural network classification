{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"16HzTVPebusoUrxVWHtePr5mcU-1JOgOF","timestamp":1670419933082}],"authorship_tag":"ABX9TyN0wIyiLZ2326T4WPu3D4CV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5bo03D4JooTr","executionInfo":{"status":"ok","timestamp":1670427433028,"user_tz":0,"elapsed":10823,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"f4df966a-d2ef-4e84-f520-bfedb860bbdb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: dmol-book in /usr/local/lib/python3.8/dist-packages (1.3.0)\n","Requirement already satisfied: jaxlib in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.3.25+cuda11.cudnn805)\n","Requirement already satisfied: MDAnalysis in /usr/local/lib/python3.8/dist-packages (from dmol-book) (2.3.0)\n","Requirement already satisfied: tensorflowjs in /usr/local/lib/python3.8/dist-packages (from dmol-book) (3.18.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.8/dist-packages (from dmol-book) (3.2.2)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.11.2)\n","Requirement already satisfied: dm-haiku in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.0.9)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.3.5)\n","Requirement already satisfied: emlp==1.0.2 in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.0.2)\n","Requirement already satisfied: selfies in /usr/local/lib/python3.8/dist-packages (from dmol-book) (2.1.1)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.8/dist-packages (from dmol-book) (2.6.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.21.6)\n","Requirement already satisfied: rdkit>=2022 in /usr/local/lib/python3.8/dist-packages (from dmol-book) (2022.9.2)\n","Requirement already satisfied: jax in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.3.25)\n","Requirement already satisfied: pillow>=8.3.2 in /usr/local/lib/python3.8/dist-packages (from dmol-book) (9.3.0)\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.8.10)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.0.2)\n","Requirement already satisfied: tensorflow>=2.7 in /usr/local/lib/python3.8/dist-packages (from dmol-book) (2.9.2)\n","Requirement already satisfied: jupyter-book==0.13.1 in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.13.1)\n","Requirement already satisfied: e3nn in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.5.0)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.7.1)\n","Requirement already satisfied: pydot in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.3.0)\n","Requirement already satisfied: moviepy in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.2.3.5)\n","Requirement already satisfied: torch==1.12 in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.12.0)\n","Requirement already satisfied: simpletransformers==0.63.9 in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.63.9)\n","Requirement already satisfied: exmol in /usr/local/lib/python3.8/dist-packages (from dmol-book) (2.2.0)\n","Requirement already satisfied: mordred[full] in /usr/local/lib/python3.8/dist-packages (from dmol-book) (1.2.0)\n","Requirement already satisfied: tensorflow-probability in /usr/local/lib/python3.8/dist-packages (from dmol-book) (0.17.0)\n","Requirement already satisfied: optax in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (0.1.4)\n","Requirement already satisfied: tqdm>=4.38 in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (4.64.1)\n","Requirement already satisfied: plum-dispatch in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (1.7.4)\n","Requirement already satisfied: pytest in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (3.6.4)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (3.1.0)\n","Requirement already satisfied: sklearn in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (0.0.post1)\n","Requirement already satisfied: objax in /usr/local/lib/python3.8/dist-packages (from emlp==1.0.2->dmol-book) (1.6.0)\n","Requirement already satisfied: sphinx-jupyterbook-latex~=0.4.6 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.4.7)\n","Requirement already satisfied: sphinx_book_theme~=0.3.2 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.3.3)\n","Requirement already satisfied: sphinx-thebe~=0.1.1 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.1.2)\n","Requirement already satisfied: click<9,>=7.1 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (7.1.2)\n","Requirement already satisfied: sphinx<5,>=4 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (4.5.0)\n","Requirement already satisfied: sphinx-design~=0.1.0 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.1.0)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (6.0)\n","Requirement already satisfied: Jinja2 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (2.11.3)\n","Requirement already satisfied: sphinx-comments in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.0.3)\n","Requirement already satisfied: sphinx-copybutton in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.5.1)\n","Requirement already satisfied: jsonschema<4 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (3.2.0)\n","Requirement already satisfied: sphinx_togglebutton in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.3.2)\n","Requirement already satisfied: sphinx-multitoc-numbering~=0.1.3 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.1.3)\n","Requirement already satisfied: linkify-it-py~=1.0.1 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (1.0.3)\n","Requirement already satisfied: sphinxcontrib-bibtex<=2.5.0,>=2.2.0 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (2.5.0)\n","Requirement already satisfied: sphinx-external-toc~=0.2.3 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.2.4)\n","Requirement already satisfied: myst-nb~=0.13.1 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.13.2)\n","Requirement already satisfied: docutils<0.18,>=0.15 in /usr/local/lib/python3.8/dist-packages (from jupyter-book==0.13.1->dmol-book) (0.17.1)\n","Requirement already satisfied: seqeval in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (1.2.2)\n","Requirement already satisfied: transformers>=4.6.0 in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (4.25.1)\n","Requirement already satisfied: datasets in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (2.7.1)\n","Requirement already satisfied: tensorboard in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (2.9.1)\n","Requirement already satisfied: streamlit in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (1.15.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (2.23.0)\n","Requirement already satisfied: wandb>=0.10.32 in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (0.13.6)\n","Requirement already satisfied: regex in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (2022.6.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (1.7.3)\n","Requirement already satisfied: tokenizers in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (0.13.2)\n","Requirement already satisfied: sentencepiece in /usr/local/lib/python3.8/dist-packages (from simpletransformers==0.63.9->dmol-book) (0.1.97)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.8/dist-packages (from torch==1.12->dmol-book) (4.1.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.8/dist-packages (from jsonschema<4->jupyter-book==0.13.1->dmol-book) (57.4.0)\n","Requirement already satisfied: pyrsistent>=0.14.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema<4->jupyter-book==0.13.1->dmol-book) (0.19.2)\n","Requirement already satisfied: six>=1.11.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema<4->jupyter-book==0.13.1->dmol-book) (1.15.0)\n","Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.8/dist-packages (from jsonschema<4->jupyter-book==0.13.1->dmol-book) (21.4.0)\n","Requirement already satisfied: uc-micro-py in /usr/local/lib/python3.8/dist-packages (from linkify-it-py~=1.0.1->jupyter-book==0.13.1->dmol-book) (1.0.1)\n","Requirement already satisfied: ipython in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (7.9.0)\n","Requirement already satisfied: jupyter-cache~=0.4.1 in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.4.3)\n","Requirement already satisfied: myst-parser~=0.15.2 in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.15.2)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (4.13.0)\n","Requirement already satisfied: ipywidgets<8,>=7.0.0 in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (7.7.1)\n","Requirement already satisfied: jupyter-sphinx~=0.3.2 in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.3.2)\n","Requirement already satisfied: nbformat~=5.0 in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.7.0)\n","Requirement already satisfied: nbconvert<7,>=5.6 in /usr/local/lib/python3.8/dist-packages (from myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.6.1)\n","Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (3.0.3)\n","Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.1.1)\n","Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.2.0)\n","Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.3.4)\n","Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.8/dist-packages (from ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (3.6.1)\n","Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.8/dist-packages (from ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (6.2)\n","Requirement already satisfied: jupyter-client in /usr/local/lib/python3.8/dist-packages (from ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (6.1.12)\n","Requirement already satisfied: jedi>=0.10 in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.18.2)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (4.4.2)\n","Requirement already satisfied: prompt-toolkit<2.1.0,>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.0.10)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.6.1)\n","Requirement already satisfied: pexpect in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (4.8.0)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.7.5)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.8/dist-packages (from ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.2.0)\n","Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.8/dist-packages (from jedi>=0.10->ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.8.3)\n","Requirement already satisfied: sqlalchemy<1.5,>=1.3.12 in /usr/local/lib/python3.8/dist-packages (from jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.4.44)\n","Requirement already satisfied: nbclient<0.6,>=0.2 in /usr/local/lib/python3.8/dist-packages (from jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.5.13)\n","Requirement already satisfied: nbdime in /usr/local/lib/python3.8/dist-packages (from jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (3.1.1)\n","Requirement already satisfied: mdit-py-plugins~=0.2.8 in /usr/local/lib/python3.8/dist-packages (from myst-parser~=0.15.2->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.2.8)\n","Requirement already satisfied: markdown-it-py<2.0.0,>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from myst-parser~=0.15.2->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.1.0)\n","Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.8/dist-packages (from nbclient<0.6,>=0.2->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.5.6)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.8/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.8.2)\n","Requirement already satisfied: pyzmq>=13 in /usr/local/lib/python3.8/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (23.2.1)\n","Requirement already satisfied: jupyter-core>=4.6.0 in /usr/local/lib/python3.8/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (4.11.2)\n","Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.4)\n","Requirement already satisfied: defusedxml in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.7.1)\n","Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.5.0)\n","Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.8.4)\n","Requirement already satisfied: testpath in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.6.0)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.8/dist-packages (from nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.0.1)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.8/dist-packages (from Jinja2->jupyter-book==0.13.1->dmol-book) (2.0.1)\n","Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.8/dist-packages (from nbformat~=5.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.16.2)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.8/dist-packages (from prompt-toolkit<2.1.0,>=2.0.0->ipython->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.2.5)\n","Requirement already satisfied: sphinxcontrib-applehelp in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (1.0.2)\n","Requirement already satisfied: imagesize in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (1.4.1)\n","Requirement already satisfied: sphinxcontrib-devhelp in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (1.0.2)\n","Requirement already satisfied: sphinxcontrib-jsmath in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (1.0.1)\n","Requirement already satisfied: babel>=1.3 in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (2.11.0)\n","Requirement already satisfied: snowballstemmer>=1.1 in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (2.2.0)\n","Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (2.0.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (20.9)\n","Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (1.1.5)\n","Requirement already satisfied: alabaster<0.8,>=0.7 in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (0.7.12)\n","Requirement already satisfied: sphinxcontrib-qthelp in /usr/local/lib/python3.8/dist-packages (from sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (1.0.3)\n","Requirement already satisfied: pytz>=2015.7 in /usr/local/lib/python3.8/dist-packages (from babel>=1.3->sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (2022.6)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.8/dist-packages (from importlib-metadata->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (3.10.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests->simpletransformers==0.63.9->dmol-book) (1.25.11)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests->simpletransformers==0.63.9->dmol-book) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests->simpletransformers==0.63.9->dmol-book) (2022.9.24)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests->simpletransformers==0.63.9->dmol-book) (2.10)\n","Requirement already satisfied: pydata-sphinx-theme~=0.8.0 in /usr/local/lib/python3.8/dist-packages (from sphinx_book_theme~=0.3.2->jupyter-book==0.13.1->dmol-book) (0.8.1)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.8/dist-packages (from pydata-sphinx-theme~=0.8.0->sphinx_book_theme~=0.3.2->jupyter-book==0.13.1->dmol-book) (4.6.3)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.8/dist-packages (from sphinx-jupyterbook-latex~=0.4.6->jupyter-book==0.13.1->dmol-book) (5.6.0)\n","Requirement already satisfied: wheel in /usr/local/lib/python3.8/dist-packages (from sphinx_togglebutton->jupyter-book==0.13.1->dmol-book) (0.38.4)\n","Requirement already satisfied: pybtex-docutils>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from sphinxcontrib-bibtex<=2.5.0,>=2.2.0->jupyter-book==0.13.1->dmol-book) (1.0.2)\n","Requirement already satisfied: pybtex>=0.24 in /usr/local/lib/python3.8/dist-packages (from sphinxcontrib-bibtex<=2.5.0,>=2.2.0->jupyter-book==0.13.1->dmol-book) (0.24.0)\n","Requirement already satisfied: latexcodec>=1.0.4 in /usr/local/lib/python3.8/dist-packages (from pybtex>=0.24->sphinxcontrib-bibtex<=2.5.0,>=2.2.0->jupyter-book==0.13.1->dmol-book) (2.0.1)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.8/dist-packages (from sqlalchemy<1.5,>=1.3.12->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.0.1)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (0.2.0)\n","Requirement already satisfied: keras<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (2.9.0)\n","Requirement already satisfied: tensorflow-estimator<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (2.9.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.3.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.6.3)\n","Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (0.4.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (2.1.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (0.28.0)\n","Requirement already satisfied: flatbuffers<2,>=1.12 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.12)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.50.0)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (3.3.0)\n","Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (3.19.6)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.14.1)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (14.0.6)\n","Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow>=2.7->dmol-book) (1.1.2)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (0.4.6)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (3.4.1)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (1.8.1)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (0.6.1)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (1.0.1)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.8/dist-packages (from tensorboard->simpletransformers==0.63.9->dmol-book) (2.14.1)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard->simpletransformers==0.63.9->dmol-book) (4.9)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard->simpletransformers==0.63.9->dmol-book) (0.2.8)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard->simpletransformers==0.63.9->dmol-book) (5.2.0)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.8/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard->simpletransformers==0.63.9->dmol-book) (1.3.1)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.8/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard->simpletransformers==0.63.9->dmol-book) (0.4.8)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.8/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard->simpletransformers==0.63.9->dmol-book) (3.2.2)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.8/dist-packages (from transformers>=4.6.0->simpletransformers==0.63.9->dmol-book) (3.8.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.10.0 in /usr/local/lib/python3.8/dist-packages (from transformers>=4.6.0->simpletransformers==0.63.9->dmol-book) (0.11.1)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.8/dist-packages (from packaging->sphinx<5,>=4->jupyter-book==0.13.1->dmol-book) (3.0.9)\n","Requirement already satisfied: shortuuid>=0.5.0 in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (1.0.11)\n","Requirement already satisfied: sentry-sdk>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (1.9.0)\n","Requirement already satisfied: GitPython>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (3.1.29)\n","Requirement already satisfied: promise<3,>=2.0 in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (2.3)\n","Requirement already satisfied: pathtools in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (0.1.2)\n","Requirement already satisfied: setproctitle in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (1.3.2)\n","Requirement already satisfied: psutil>=5.0.0 in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (5.4.8)\n","Requirement already satisfied: docker-pycreds>=0.4.0 in /usr/local/lib/python3.8/dist-packages (from wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (0.4.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.8/dist-packages (from GitPython>=1.0.0->wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (4.0.10)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.8/dist-packages (from gitdb<5,>=4.0.1->GitPython>=1.0.0->wandb>=0.10.32->simpletransformers==0.63.9->dmol-book) (5.0.0)\n","Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.8/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (5.7.16)\n","Requirement already satisfied: Send2Trash in /usr/local/lib/python3.8/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.8.0)\n","Requirement already satisfied: terminado>=0.8.1 in /usr/local/lib/python3.8/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.13.3)\n","Requirement already satisfied: prometheus-client in /usr/local/lib/python3.8/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.15.0)\n","Requirement already satisfied: ptyprocess in /usr/local/lib/python3.8/dist-packages (from terminado>=0.8.1->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets<8,>=7.0.0->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.7.0)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.8/dist-packages (from bleach->nbconvert<7,>=5.6->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.5.1)\n","Requirement already satisfied: dill<0.3.7 in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (0.3.6)\n","Requirement already satisfied: multiprocess in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (0.70.14)\n","Requirement already satisfied: fsspec[http]>=2021.11.1 in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (2022.11.0)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (3.8.3)\n","Requirement already satisfied: xxhash in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (3.1.0)\n","Requirement already satisfied: pyarrow>=6.0.0 in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (9.0.0)\n","Requirement already satisfied: responses<0.19 in /usr/local/lib/python3.8/dist-packages (from datasets->simpletransformers==0.63.9->dmol-book) (0.18.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (6.0.2)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (1.3.1)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (1.8.1)\n","Requirement already satisfied: charset-normalizer<3.0,>=2.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (2.1.1)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (1.3.3)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.8/dist-packages (from aiohttp->datasets->simpletransformers==0.63.9->dmol-book) (4.0.2)\n","Requirement already satisfied: jmp>=0.0.2 in /usr/local/lib/python3.8/dist-packages (from dm-haiku->dmol-book) (0.0.2)\n","Requirement already satisfied: opt-einsum-fx>=0.1.4 in /usr/local/lib/python3.8/dist-packages (from e3nn->dmol-book) (0.1.4)\n","Requirement already satisfied: skunk>=0.4.0 in /usr/local/lib/python3.8/dist-packages (from exmol->dmol-book) (1.0.0)\n","Requirement already satisfied: ratelimit in /usr/local/lib/python3.8/dist-packages (from exmol->dmol-book) (2.2.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->dmol-book) (1.4.4)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.8/dist-packages (from matplotlib->dmol-book) (0.11.0)\n","Requirement already satisfied: fasteners in /usr/local/lib/python3.8/dist-packages (from MDAnalysis->dmol-book) (0.18)\n","Requirement already satisfied: gsd>=1.9.3 in /usr/local/lib/python3.8/dist-packages (from MDAnalysis->dmol-book) (2.7.0)\n","Requirement already satisfied: mmtf-python>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from MDAnalysis->dmol-book) (1.1.3)\n","Requirement already satisfied: threadpoolctl in /usr/local/lib/python3.8/dist-packages (from MDAnalysis->dmol-book) (3.1.0)\n","Requirement already satisfied: joblib>=0.12 in /usr/local/lib/python3.8/dist-packages (from MDAnalysis->dmol-book) (1.2.0)\n","Requirement already satisfied: biopython>=1.71 in /usr/local/lib/python3.8/dist-packages (from MDAnalysis->dmol-book) (1.80)\n","Requirement already satisfied: GridDataFormats>=0.4.0 in /usr/local/lib/python3.8/dist-packages (from MDAnalysis->dmol-book) (1.0.1)\n","Requirement already satisfied: mrcfile in /usr/local/lib/python3.8/dist-packages (from GridDataFormats>=0.4.0->MDAnalysis->dmol-book) (1.4.3)\n","Requirement already satisfied: msgpack>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from mmtf-python>=1.0.0->MDAnalysis->dmol-book) (1.0.4)\n","Requirement already satisfied: imageio<3.0,>=2.1.2 in /usr/local/lib/python3.8/dist-packages (from moviepy->dmol-book) (2.9.0)\n","Requirement already satisfied: jupyter-server in /usr/local/lib/python3.8/dist-packages (from nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.15.6)\n","Requirement already satisfied: colorama in /usr/local/lib/python3.8/dist-packages (from nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.4.6)\n","Requirement already satisfied: jupyter-server-mathjax>=0.2.2 in /usr/local/lib/python3.8/dist-packages (from nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (0.2.6)\n","Requirement already satisfied: anyio>=3.1.0 in /usr/local/lib/python3.8/dist-packages (from jupyter-server->nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (3.6.2)\n","Requirement already satisfied: websocket-client in /usr/local/lib/python3.8/dist-packages (from jupyter-server->nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.4.2)\n","Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.8/dist-packages (from jupyter-server->nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (21.3.0)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.8/dist-packages (from anyio>=3.1.0->jupyter-server->nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.3.0)\n","Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.8/dist-packages (from argon2-cffi->jupyter-server->nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (21.2.0)\n","Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from argon2-cffi-bindings->argon2-cffi->jupyter-server->nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (1.15.1)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.8/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->jupyter-server->nbdime->jupyter-cache~=0.4.1->myst-nb~=0.13.1->jupyter-book==0.13.1->dmol-book) (2.21)\n","Requirement already satisfied: parameterized in /usr/local/lib/python3.8/dist-packages (from objax->emlp==1.0.2->dmol-book) (0.8.1)\n","Requirement already satisfied: chex>=0.1.5 in /usr/local/lib/python3.8/dist-packages (from optax->emlp==1.0.2->dmol-book) (0.1.5)\n","Requirement already satisfied: dm-tree>=0.1.5 in /usr/local/lib/python3.8/dist-packages (from chex>=0.1.5->optax->emlp==1.0.2->dmol-book) (0.1.7)\n","Requirement already satisfied: toolz>=0.9.0 in /usr/local/lib/python3.8/dist-packages (from chex>=0.1.5->optax->emlp==1.0.2->dmol-book) (0.12.0)\n","Requirement already satisfied: pluggy<0.8,>=0.5 in /usr/local/lib/python3.8/dist-packages (from pytest->emlp==1.0.2->dmol-book) (0.7.1)\n","Requirement already satisfied: atomicwrites>=1.0 in /usr/local/lib/python3.8/dist-packages (from pytest->emlp==1.0.2->dmol-book) (1.4.1)\n","Requirement already satisfied: more-itertools>=4.0.0 in /usr/local/lib/python3.8/dist-packages (from pytest->emlp==1.0.2->dmol-book) (9.0.0)\n","Requirement already satisfied: py>=1.5.0 in /usr/local/lib/python3.8/dist-packages (from pytest->emlp==1.0.2->dmol-book) (1.11.0)\n","Requirement already satisfied: pympler>=0.9 in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (1.0.1)\n","Requirement already satisfied: blinker>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (1.5)\n","Requirement already satisfied: semver in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (2.13.0)\n","Requirement already satisfied: watchdog in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (2.2.0)\n","Requirement already satisfied: validators>=0.2 in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (0.20.0)\n","Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (12.6.0)\n","Requirement already satisfied: tzlocal>=1.1 in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (1.5.1)\n","Requirement already satisfied: altair>=3.2.0 in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (4.2.0)\n","Requirement already satisfied: toml in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (0.10.2)\n","Requirement already satisfied: pydeck>=0.1.dev5 in /usr/local/lib/python3.8/dist-packages (from streamlit->simpletransformers==0.63.9->dmol-book) (0.8.0)\n","Requirement already satisfied: commonmark<0.10.0,>=0.9.0 in /usr/local/lib/python3.8/dist-packages (from rich>=10.11.0->streamlit->simpletransformers==0.63.9->dmol-book) (0.9.1)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.8/dist-packages (from sympy->dmol-book) (1.2.1)\n","Requirement already satisfied: cloudpickle>=1.3 in /usr/local/lib/python3.8/dist-packages (from tensorflow-probability->dmol-book) (1.5.0)\n","Requirement already satisfied: tensorflow-hub<0.13,>=0.7.0 in /usr/local/lib/python3.8/dist-packages (from tensorflowjs->dmol-book) (0.12.0)\n"]}],"source":["!pip install dmol-book"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import matplotlib as mpl\n","import numpy as np\n","import tensorflow as tf\n","import pandas as pd\n","import jax.numpy as jnp\n","import jax\n","import rdkit, rdkit.Chem, rdkit.Chem.rdDepictor, rdkit.Chem.Draw\n","import networkx as nx\n","import dmol\n","\n","soldata = pd.read_csv(\n","    \"https://github.com/whitead/dmol-book/raw/master/data/curated-solubility-dataset.csv\"\n",")\n","soldata.head()"],"metadata":{"id":"53z3JmqPrUha","colab":{"base_uri":"https://localhost:8080/","height":386},"executionInfo":{"status":"ok","timestamp":1670427459279,"user_tz":0,"elapsed":1632,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"138c970d-0770-4020-fbea-29f821900e67"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    ID                                               Name  \\\n","0  A-3         N,N,N-trimethyloctadecan-1-aminium bromide   \n","1  A-4                           Benzo[cd]indol-2(1H)-one   \n","2  A-5                               4-chlorobenzaldehyde   \n","3  A-8  zinc bis[2-hydroxy-3,5-bis(1-phenylethyl)benzo...   \n","4  A-9  4-({4-[bis(oxiran-2-ylmethyl)amino]phenyl}meth...   \n","\n","                                               InChI  \\\n","0  InChI=1S/C21H46N.BrH/c1-5-6-7-8-9-10-11-12-13-...   \n","1  InChI=1S/C11H7NO/c13-11-8-5-1-3-7-4-2-6-9(12-1...   \n","2        InChI=1S/C7H5ClO/c8-7-3-1-6(5-9)2-4-7/h1-5H   \n","3  InChI=1S/2C23H22O3.Zn/c2*1-15(17-9-5-3-6-10-17...   \n","4  InChI=1S/C25H30N2O4/c1-5-20(26(10-22-14-28-22)...   \n","\n","                      InChIKey  \\\n","0  SZEMGTQCPRNXEG-UHFFFAOYSA-M   \n","1  GPYLCFQEKPUWLD-UHFFFAOYSA-N   \n","2  AVPYQKSLYISFPO-UHFFFAOYSA-N   \n","3  XTUPUYCJWKHGSW-UHFFFAOYSA-L   \n","4  FAUAZXVRLVIARB-UHFFFAOYSA-N   \n","\n","                                              SMILES  Solubility   SD  \\\n","0                [Br-].CCCCCCCCCCCCCCCCCC[N+](C)(C)C   -3.616127  0.0   \n","1                               O=C1Nc2cccc3cccc1c23   -3.254767  0.0   \n","2                                    Clc1ccc(C=O)cc1   -2.177078  0.0   \n","3  [Zn++].CC(c1ccccc1)c2cc(C(C)c3ccccc3)c(O)c(c2)...   -3.924409  0.0   \n","4  C1OC1CN(CC2CO2)c3ccc(Cc4ccc(cc4)N(CC5CO5)CC6CO...   -4.662065  0.0   \n","\n","   Ocurrences Group    MolWt  ...  NumRotatableBonds  NumValenceElectrons  \\\n","0           1    G1  392.510  ...               17.0                142.0   \n","1           1    G1  169.183  ...                0.0                 62.0   \n","2           1    G1  140.569  ...                1.0                 46.0   \n","3           1    G1  756.226  ...               10.0                264.0   \n","4           1    G1  422.525  ...               12.0                164.0   \n","\n","   NumAromaticRings  NumSaturatedRings  NumAliphaticRings  RingCount    TPSA  \\\n","0               0.0                0.0                0.0        0.0    0.00   \n","1               2.0                0.0                1.0        3.0   29.10   \n","2               1.0                0.0                0.0        1.0   17.07   \n","3               6.0                0.0                0.0        6.0  120.72   \n","4               2.0                4.0                4.0        6.0   56.60   \n","\n","    LabuteASA      BalabanJ      BertzCT  \n","0  158.520601  0.000000e+00   210.377334  \n","1   75.183563  2.582996e+00   511.229248  \n","2   58.261134  3.009782e+00   202.661065  \n","3  323.755434  2.322963e-07  1964.648666  \n","4  183.183268  1.084427e+00   769.899934  \n","\n","[5 rows x 26 columns]"],"text/html":["\n","  <div id=\"df-a6cc11dd-d17f-4240-957e-dc520315d26e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Name</th>\n","      <th>InChI</th>\n","      <th>InChIKey</th>\n","      <th>SMILES</th>\n","      <th>Solubility</th>\n","      <th>SD</th>\n","      <th>Ocurrences</th>\n","      <th>Group</th>\n","      <th>MolWt</th>\n","      <th>...</th>\n","      <th>NumRotatableBonds</th>\n","      <th>NumValenceElectrons</th>\n","      <th>NumAromaticRings</th>\n","      <th>NumSaturatedRings</th>\n","      <th>NumAliphaticRings</th>\n","      <th>RingCount</th>\n","      <th>TPSA</th>\n","      <th>LabuteASA</th>\n","      <th>BalabanJ</th>\n","      <th>BertzCT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A-3</td>\n","      <td>N,N,N-trimethyloctadecan-1-aminium bromide</td>\n","      <td>InChI=1S/C21H46N.BrH/c1-5-6-7-8-9-10-11-12-13-...</td>\n","      <td>SZEMGTQCPRNXEG-UHFFFAOYSA-M</td>\n","      <td>[Br-].CCCCCCCCCCCCCCCCCC[N+](C)(C)C</td>\n","      <td>-3.616127</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>392.510</td>\n","      <td>...</td>\n","      <td>17.0</td>\n","      <td>142.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>158.520601</td>\n","      <td>0.000000e+00</td>\n","      <td>210.377334</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A-4</td>\n","      <td>Benzo[cd]indol-2(1H)-one</td>\n","      <td>InChI=1S/C11H7NO/c13-11-8-5-1-3-7-4-2-6-9(12-1...</td>\n","      <td>GPYLCFQEKPUWLD-UHFFFAOYSA-N</td>\n","      <td>O=C1Nc2cccc3cccc1c23</td>\n","      <td>-3.254767</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>169.183</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>62.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>29.10</td>\n","      <td>75.183563</td>\n","      <td>2.582996e+00</td>\n","      <td>511.229248</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A-5</td>\n","      <td>4-chlorobenzaldehyde</td>\n","      <td>InChI=1S/C7H5ClO/c8-7-3-1-6(5-9)2-4-7/h1-5H</td>\n","      <td>AVPYQKSLYISFPO-UHFFFAOYSA-N</td>\n","      <td>Clc1ccc(C=O)cc1</td>\n","      <td>-2.177078</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>140.569</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>46.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>17.07</td>\n","      <td>58.261134</td>\n","      <td>3.009782e+00</td>\n","      <td>202.661065</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>A-8</td>\n","      <td>zinc bis[2-hydroxy-3,5-bis(1-phenylethyl)benzo...</td>\n","      <td>InChI=1S/2C23H22O3.Zn/c2*1-15(17-9-5-3-6-10-17...</td>\n","      <td>XTUPUYCJWKHGSW-UHFFFAOYSA-L</td>\n","      <td>[Zn++].CC(c1ccccc1)c2cc(C(C)c3ccccc3)c(O)c(c2)...</td>\n","      <td>-3.924409</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>756.226</td>\n","      <td>...</td>\n","      <td>10.0</td>\n","      <td>264.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>6.0</td>\n","      <td>120.72</td>\n","      <td>323.755434</td>\n","      <td>2.322963e-07</td>\n","      <td>1964.648666</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>A-9</td>\n","      <td>4-({4-[bis(oxiran-2-ylmethyl)amino]phenyl}meth...</td>\n","      <td>InChI=1S/C25H30N2O4/c1-5-20(26(10-22-14-28-22)...</td>\n","      <td>FAUAZXVRLVIARB-UHFFFAOYSA-N</td>\n","      <td>C1OC1CN(CC2CO2)c3ccc(Cc4ccc(cc4)N(CC5CO5)CC6CO...</td>\n","      <td>-4.662065</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>G1</td>\n","      <td>422.525</td>\n","      <td>...</td>\n","      <td>12.0</td>\n","      <td>164.0</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>6.0</td>\n","      <td>56.60</td>\n","      <td>183.183268</td>\n","      <td>1.084427e+00</td>\n","      <td>769.899934</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 26 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6cc11dd-d17f-4240-957e-dc520315d26e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a6cc11dd-d17f-4240-957e-dc520315d26e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a6cc11dd-d17f-4240-957e-dc520315d26e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["np.random.seed(0)\n","\n","\n","def gen_smiles2graph(sml):\n","    m = rdkit.Chem.MolFromSmiles(sml)\n","    m = rdkit.Chem.AddHs(m)\n","    order_string = {\n","        rdkit.Chem.rdchem.BondType.SINGLE: 1,\n","        rdkit.Chem.rdchem.BondType.DOUBLE: 2,\n","        rdkit.Chem.rdchem.BondType.TRIPLE: 3,\n","        rdkit.Chem.rdchem.BondType.AROMATIC: 4,\n","    }\n","    N = len(list(m.GetAtoms()))\n","    nodes = np.zeros((N, 100))\n","    for i in m.GetAtoms():\n","        nodes[i.GetIdx(), i.GetAtomicNum()] = 1\n","\n","    adj = np.zeros((N, N))\n","    for j in m.GetBonds():\n","        u = min(j.GetBeginAtomIdx(), j.GetEndAtomIdx())\n","        v = max(j.GetBeginAtomIdx(), j.GetEndAtomIdx())\n","        order = j.GetBondType()\n","        if order in order_string:\n","            order = order_string[order]\n","        else:\n","            raise Warning(\"Ignoring bond order\" + order)\n","        adj[u, v] = 1\n","        adj[v, u] = 1\n","    adj += np.eye(N)\n","    return nodes, adj\n","\n","class GCNLayer(tf.keras.layers.Layer):  ## Graph Convolution Network definition\n","    def __init__(self, activation=None, **kwargs):\n","        super(GCNLayer, self).__init__(**kwargs)\n","        self.activation = tf.keras.activations.get(activation)\n","\n","    def build(self, input_shape):\n","        # create trainable weights\n","        node_shape, adj_shape = input_shape\n","        self.w = self.add_weight(shape=(node_shape[2], node_shape[2]), name=\"w\")\n","\n","    def call(self, inputs):\n","        # split input into nodes, adj\n","        nodes, adj = inputs\n","        # compute degree\n","        degree = tf.reduce_sum(adj, axis=-1)\n","        # GCN equation\n","        new_nodes = tf.einsum(\"bi,bij,bjk,kl->bil\", 1 / degree, adj, nodes, self.w)\n","        out = self.activation(new_nodes)\n","        return out, adj\n","\n","class GRLayer(tf.keras.layers.Layer): ##  Layer than computes mean over node features\n","    def __init__(self, name=\"GRLayer\", **kwargs):\n","        super(GRLayer, self).__init__(name=name, **kwargs)\n","\n","    def call(self, inputs):\n","        nodes, adj = inputs\n","        reduction = tf.reduce_mean(nodes, axis=1)\n","        return reduction\n"],"metadata":{"id":"ITGbcuWhrq2O","executionInfo":{"status":"ok","timestamp":1670427463692,"user_tz":0,"elapsed":276,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["ninput = tf.keras.Input((None,100,))\n","ainput = tf.keras.Input((None,None,))\n","\n","x = GCNLayer(\"relu\")([ninput, ainput])\n","x = GCNLayer(\"relu\")(x)\n","x = GCNLayer(\"relu\")(x)\n","x = GCNLayer(\"relu\")(x)\n","# reduce to graph features\n","x = GRLayer()(x)\n","# standard layers \n","x = tf.keras.layers.Dense(64, \"relu\")(x)\n","x = tf.keras.layers.Dense(32, \"relu\")(x)\n","x = tf.keras.layers.Dense(32, \"relu\")(x)\n","x = tf.keras.layers.Dense(12, \"relu\")(x)\n","x = tf.keras.layers.Dense(2, activation = \"log_softmax\")(x)\n","model = tf.keras.Model(inputs=(ninput, ainput), outputs=x)\n","model.summary()"],"metadata":{"id":"b55i_BtsubmN","executionInfo":{"status":"ok","timestamp":1670427497209,"user_tz":0,"elapsed":715,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b1fb5dad-4e73-404e-a1a2-34337c2b309c"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model_3\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_9 (InputLayer)           [(None, None, 100)]  0           []                               \n","                                                                                                  \n"," input_10 (InputLayer)          [(None, None, None)  0           []                               \n","                                ]                                                                 \n","                                                                                                  \n"," gcn_layer_16 (GCNLayer)        ((None, None, 100),  10000       ['input_9[0][0]',                \n","                                 (None, None, None)               'input_10[0][0]']               \n","                                )                                                                 \n","                                                                                                  \n"," gcn_layer_17 (GCNLayer)        ((None, None, 100),  10000       ['gcn_layer_16[0][0]',           \n","                                 (None, None, None)               'gcn_layer_16[0][1]']           \n","                                )                                                                 \n","                                                                                                  \n"," gcn_layer_18 (GCNLayer)        ((None, None, 100),  10000       ['gcn_layer_17[0][0]',           \n","                                 (None, None, None)               'gcn_layer_17[0][1]']           \n","                                )                                                                 \n","                                                                                                  \n"," gcn_layer_19 (GCNLayer)        ((None, None, 100),  10000       ['gcn_layer_18[0][0]',           \n","                                 (None, None, None)               'gcn_layer_18[0][1]']           \n","                                )                                                                 \n","                                                                                                  \n"," GRLayer (GRLayer)              (None, 100)          0           ['gcn_layer_19[0][0]',           \n","                                                                  'gcn_layer_19[0][1]']           \n","                                                                                                  \n"," dense_20 (Dense)               (None, 64)           6464        ['GRLayer[0][0]']                \n","                                                                                                  \n"," dense_21 (Dense)               (None, 32)           2080        ['dense_20[0][0]']               \n","                                                                                                  \n"," dense_22 (Dense)               (None, 32)           1056        ['dense_21[0][0]']               \n","                                                                                                  \n"," dense_23 (Dense)               (None, 12)           396         ['dense_22[0][0]']               \n","                                                                                                  \n"," dense_24 (Dense)               (None, 2)            26          ['dense_23[0][0]']               \n","                                                                                                  \n","==================================================================================================\n","Total params: 50,022\n","Trainable params: 50,022\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["## Preparing data\n","meansol = float(soldata[['Solubility']].mean())\n","def gen():   ## generate graphs and labels\n","    for i in range(len(soldata)):\n","        graph = gen_smiles2graph(soldata.SMILES[i])\n","        sol = jnp.where(soldata.Solubility.values[i] > meansol, x=float(1), y=float(0))\n","        yield graph, sol\n","\n","data = tf.data.Dataset.from_generator(gen, output_types=((tf.float32, tf.float32), tf.float32),\n","    output_shapes=((tf.TensorShape([None, 100]), tf.TensorShape([None, None])), tf.TensorShape([]), ),)\n","\n","test_data = data.take(200)\n","val_data = data.skip(200).take(200)\n","train_data = data.skip(400)"],"metadata":{"id":"NIbQKBV9vB2E","executionInfo":{"status":"ok","timestamp":1670427506350,"user_tz":0,"elapsed":264,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["model.compile(\"Nadam\", loss=\"mean_squared_error\", metrics=\"accuracy\")\n","result = model.fit(train_data.batch(1), validation_data=val_data.batch(1), epochs=3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4HbYmRv4wtni","executionInfo":{"status":"ok","timestamp":1670428377675,"user_tz":0,"elapsed":384160,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"dfca2455-9a6f-4567-e877-8ee2f33cc12c"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/3\n","9582/9582 [==============================] - 102s 10ms/step - loss: 1.8082 - accuracy: 0.4715 - val_loss: 1.7213 - val_accuracy: 0.4800\n","Epoch 2/3\n","9582/9582 [==============================] - 100s 10ms/step - loss: 1.8082 - accuracy: 0.4419 - val_loss: 1.7213 - val_accuracy: 0.4800\n","Epoch 3/3\n","9582/9582 [==============================] - 99s 10ms/step - loss: 1.8082 - accuracy: 0.4923 - val_loss: 1.7213 - val_accuracy: 0.4800\n"]}]},{"cell_type":"code","source":["plt.plot(result.history[\"loss\"], label=\"training\")\n","plt.plot(result.history[\"val_loss\"], label=\"validation\")\n","plt.legend()\n","plt.xlabel(\"Epoch\")\n","plt.ylabel(\"Loss\")\n","plt.show()\n","yhat = model.predict(test_data.batch(1), verbose=0)[:, 0]\n","test_y = [y for x, y in test_data]\n","plt.figure()\n","plt.plot(test_y, test_y, \"-\")\n","plt.plot(test_y, yhat, \".\")\n","plt.text(\n","    min(test_y) + 1,\n","    max(test_y) - 2,\n","    f\"correlation = {np.corrcoef(test_y, yhat)[0,1]:.3f}\",\n",")\n","plt.text(\n","    min(test_y) + 1,\n","    max(test_y) - 3,\n","    f\"loss = {np.sqrt(np.mean((test_y - yhat)**2)):.3f}\",\n",")\n","plt.title(\"Testing Data\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ybSrypmEKGXN","executionInfo":{"status":"ok","timestamp":1670427956139,"user_tz":0,"elapsed":5429,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"8285b191-34f6-4586-9bcf-bbfe0584ef28"},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 900x692.308 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 900x692.308 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}