{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1yF-G52CDhiW6x8WChLEwQ-kPQDw-sv9h","timestamp":1677527568710},{"file_id":"1mqMpWcgYcWKA-I73fKgtuof9mEJPKTGL","timestamp":1677237987285},{"file_id":"1kXdf-zidM7zu9sWx4sIeg9tvb3xfNqpg","timestamp":1676900827945},{"file_id":"1qZyzg4sDpZ21r3rYEoPnFrNPhEWBZL1K","timestamp":1676898851842},{"file_id":"1NFMB7T55iarWwMZY5gviYVWvI2p-Vo_P","timestamp":1676625857047},{"file_id":"1Fq3N7AAi3kkUyBIglhRG8PzdN84fmsWQ","timestamp":1676221371043}],"authorship_tag":"ABX9TyPt5SfGsIaTnduE/tkYnEoX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!curl -Lo conda_installer.py https://raw.githubusercontent.com/deepchem/deepchem/master/scripts/colab_install.py\n","import conda_installer\n","conda_installer.install()\n","!/root/miniconda/bin/conda info -e"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Dc9RyQlDsSX2","outputId":"330d2e89-af85-4f1b-a3f2-34f043f57266","executionInfo":{"status":"ok","timestamp":1677506331750,"user_tz":0,"elapsed":4344,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n","                                 Dload  Upload   Total   Spent    Left  Speed\n","\r  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\r100  3457  100  3457    0     0  13883      0 --:--:-- --:--:-- --:--:-- 13883\n"]},{"output_type":"stream","name":"stderr","text":["all packages are already installed\n","INFO:conda_installer:all packages are already installed\n"]},{"output_type":"stream","name":"stdout","text":["# conda environments:\n","#\n","base                     /root/miniconda\n","\n"]}]},{"cell_type":"code","source":["!conda create -n chemprop python=3.8\n","\n","!conda activate chemprop\n","\n","!conda install -c conda-forge rdkit\n","\n","!pip install git+https://github.com/bp-kelley/descriptastorus\n","\n","!pip install chemprop"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dVetcWFpvtfI","executionInfo":{"status":"ok","timestamp":1677506358822,"user_tz":0,"elapsed":23213,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"6910fb01-ac8e-4f75-d659-37c85838cb66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/bin/bash: conda: command not found\n","/bin/bash: conda: command not found\n","/bin/bash: conda: command not found\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting git+https://github.com/bp-kelley/descriptastorus\n","  Cloning https://github.com/bp-kelley/descriptastorus to /tmp/pip-req-build-ffenkd0o\n","  Running command git clone --filter=blob:none --quiet https://github.com/bp-kelley/descriptastorus /tmp/pip-req-build-ffenkd0o\n","  Resolved https://github.com/bp-kelley/descriptastorus to commit 86eedc60546abe6f59cdbcb12025a61157ba178d\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: pandas_flavor in /usr/local/lib/python3.8/dist-packages (from descriptastorus==2.5.0.20) (0.5.0)\n","Requirement already satisfied: rdkit in /usr/local/lib/python3.8/dist-packages (from descriptastorus==2.5.0.20) (2022.9.5)\n","Requirement already satisfied: pandas>=0.23 in /usr/local/lib/python3.8/dist-packages (from pandas_flavor->descriptastorus==2.5.0.20) (1.3.5)\n","Requirement already satisfied: lazy-loader>=0.1 in /usr/local/lib/python3.8/dist-packages (from pandas_flavor->descriptastorus==2.5.0.20) (0.1)\n","Requirement already satisfied: xarray in /usr/local/lib/python3.8/dist-packages (from pandas_flavor->descriptastorus==2.5.0.20) (2022.12.0)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.8/dist-packages (from rdkit->descriptastorus==2.5.0.20) (7.1.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from rdkit->descriptastorus==2.5.0.20) (1.22.4)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.23->pandas_flavor->descriptastorus==2.5.0.20) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.23->pandas_flavor->descriptastorus==2.5.0.20) (2022.7.1)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.8/dist-packages (from xarray->pandas_flavor->descriptastorus==2.5.0.20) (23.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.7.3->pandas>=0.23->pandas_flavor->descriptastorus==2.5.0.20) (1.15.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: chemprop in /usr/local/lib/python3.8/dist-packages (1.5.2)\n","Requirement already satisfied: scikit-learn>=0.22.2.post1 in /usr/local/lib/python3.8/dist-packages (from chemprop) (1.0.2)\n","Requirement already satisfied: pandas>=1.0.3 in /usr/local/lib/python3.8/dist-packages (from chemprop) (1.3.5)\n","Requirement already satisfied: tensorboardX>=2.0 in /usr/local/lib/python3.8/dist-packages (from chemprop) (2.6)\n","Requirement already satisfied: matplotlib>=3.1.3 in /usr/local/lib/python3.8/dist-packages (from chemprop) (3.5.3)\n","Requirement already satisfied: flask>=1.1.2 in /usr/local/lib/python3.8/dist-packages (from chemprop) (1.1.4)\n","Requirement already satisfied: numpy>=1.18.1 in /usr/local/lib/python3.8/dist-packages (from chemprop) (1.22.4)\n","Requirement already satisfied: typed-argument-parser>=1.6.1 in /usr/local/lib/python3.8/dist-packages (from chemprop) (1.7.2)\n","Requirement already satisfied: pandas-flavor>=0.2.0 in /usr/local/lib/python3.8/dist-packages (from chemprop) (0.5.0)\n","Requirement already satisfied: scipy>=1.5.2 in /usr/local/lib/python3.8/dist-packages (from chemprop) (1.7.3)\n","Requirement already satisfied: sphinx>=3.1.2 in /usr/local/lib/python3.8/dist-packages (from chemprop) (3.5.4)\n","Requirement already satisfied: hyperopt>=0.2.3 in /usr/local/lib/python3.8/dist-packages (from chemprop) (0.2.7)\n","Requirement already satisfied: tqdm>=4.45.0 in /usr/local/lib/python3.8/dist-packages (from chemprop) (4.64.1)\n","Requirement already satisfied: torch>=1.5.2 in /usr/local/lib/python3.8/dist-packages (from chemprop) (1.13.1+cu116)\n","Requirement already satisfied: Werkzeug<2.0,>=0.15 in /usr/local/lib/python3.8/dist-packages (from flask>=1.1.2->chemprop) (1.0.1)\n","Requirement already satisfied: click<8.0,>=5.1 in /usr/local/lib/python3.8/dist-packages (from flask>=1.1.2->chemprop) (7.1.2)\n","Requirement already satisfied: itsdangerous<2.0,>=0.24 in /usr/local/lib/python3.8/dist-packages (from flask>=1.1.2->chemprop) (1.1.0)\n","Requirement already satisfied: Jinja2<3.0,>=2.10.1 in /usr/local/lib/python3.8/dist-packages (from flask>=1.1.2->chemprop) (2.11.3)\n","Requirement already satisfied: cloudpickle in /usr/local/lib/python3.8/dist-packages (from hyperopt>=0.2.3->chemprop) (2.2.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.8/dist-packages (from hyperopt>=0.2.3->chemprop) (1.15.0)\n","Requirement already satisfied: py4j in /usr/local/lib/python3.8/dist-packages (from hyperopt>=0.2.3->chemprop) (0.10.9.7)\n","Requirement already satisfied: networkx>=2.2 in /usr/local/lib/python3.8/dist-packages (from hyperopt>=0.2.3->chemprop) (3.0)\n","Requirement already satisfied: future in /usr/local/lib/python3.8/dist-packages (from hyperopt>=0.2.3->chemprop) (0.16.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.8/dist-packages (from matplotlib>=3.1.3->chemprop) (0.11.0)\n","Requirement already satisfied: pyparsing>=2.2.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib>=3.1.3->chemprop) (3.0.9)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.8/dist-packages (from matplotlib>=3.1.3->chemprop) (4.38.0)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.8/dist-packages (from matplotlib>=3.1.3->chemprop) (7.1.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib>=3.1.3->chemprop) (1.4.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.8/dist-packages (from matplotlib>=3.1.3->chemprop) (23.0)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.8/dist-packages (from matplotlib>=3.1.3->chemprop) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=1.0.3->chemprop) (2022.7.1)\n","Requirement already satisfied: lazy-loader>=0.1 in /usr/local/lib/python3.8/dist-packages (from pandas-flavor>=0.2.0->chemprop) (0.1)\n","Requirement already satisfied: xarray in /usr/local/lib/python3.8/dist-packages (from pandas-flavor>=0.2.0->chemprop) (2022.12.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from scikit-learn>=0.22.2.post1->chemprop) (3.1.0)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.8/dist-packages (from scikit-learn>=0.22.2.post1->chemprop) (1.2.0)\n","Requirement already satisfied: requests>=2.5.0 in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (2.25.1)\n","Requirement already satisfied: sphinxcontrib-jsmath in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (1.0.1)\n","Requirement already satisfied: sphinxcontrib-serializinghtml in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (1.1.5)\n","Requirement already satisfied: babel>=1.3 in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (2.11.0)\n","Requirement already satisfied: imagesize in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (1.4.1)\n","Requirement already satisfied: alabaster<0.8,>=0.7 in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (0.7.13)\n","Requirement already satisfied: snowballstemmer>=1.1 in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (2.2.0)\n","Requirement already satisfied: sphinxcontrib-qthelp in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (1.0.3)\n","Requirement already satisfied: sphinxcontrib-devhelp in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (1.0.2)\n","Requirement already satisfied: docutils<0.17,>=0.12 in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (0.16)\n","Requirement already satisfied: sphinxcontrib-htmlhelp in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (2.0.1)\n","Requirement already satisfied: sphinxcontrib-applehelp in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (1.0.4)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (57.4.0)\n","Requirement already satisfied: Pygments>=2.0 in /usr/local/lib/python3.8/dist-packages (from sphinx>=3.1.2->chemprop) (2.6.1)\n","Requirement already satisfied: protobuf<4,>=3.8.0 in /usr/local/lib/python3.8/dist-packages (from tensorboardX>=2.0->chemprop) (3.19.6)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.8/dist-packages (from torch>=1.5.2->chemprop) (4.5.0)\n","Requirement already satisfied: typing-inspect>=0.7.1 in /usr/local/lib/python3.8/dist-packages (from typed-argument-parser>=1.6.1->chemprop) (0.8.0)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.8/dist-packages (from Jinja2<3.0,>=2.10.1->flask>=1.1.2->chemprop) (2.0.1)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests>=2.5.0->sphinx>=3.1.2->chemprop) (4.0.0)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests>=2.5.0->sphinx>=3.1.2->chemprop) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests>=2.5.0->sphinx>=3.1.2->chemprop) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests>=2.5.0->sphinx>=3.1.2->chemprop) (2022.12.7)\n","Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.8/dist-packages (from typing-inspect>=0.7.1->typed-argument-parser>=1.6.1->chemprop) (1.0.0)\n"]}]},{"cell_type":"code","execution_count":4,"metadata":{"id":"LNlLmWO2tRnu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677527785379,"user_tz":0,"elapsed":30402,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"76bc038f-22d2-400c-8457-869e2a00041e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}],"source":["#import deepchem as dc\n","#from deepchem.models.optimizers import Adam, ExponentialDecay\n","#import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import os\n","import pandas as pd\n","#import rdkit, rdkit.Chem, rdkit.Chem.Draw\n","#from rdkit import Chem\n","#from rdkit.Chem import AllChem\n","#from rdkit.Chem import Draw, PyMol, rdFMCS\n","#from rdkit.Chem.Draw import IPythonConsole\n","#from rdkit import rdBase\n","#from deepchem import metrics\n","from IPython.display import Image, display\n","#from rdkit.Chem.Draw import SimilarityMaps\n","#from collections import Counter\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import jax.numpy as jnp\n","import jax\n","#import seaborn as sns\n","#import rdkit, rdkit.Chem, rdkit.Chem.Draw\n","#import urllib\n","#from collections import Counter\n","from google.colab import drive \n","drive.mount('/content/gdrive')"]},{"cell_type":"code","source":["train_proportions = [10,15,20,25,30,40,50,60,70,80,90]"],"metadata":{"id":"oi38MoN0Zrb5","executionInfo":{"status":"ok","timestamp":1677527603239,"user_tz":0,"elapsed":3,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import mean_absolute_error\n","\n","##RUN 4\n","predicted_10_90 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/ten_ninety/predicted5.csv\")).HOMO\n","true_10_90 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/10_90_test.csv\")).HOMO\n","MAE_10_90 = mean_absolute_error(true_10_90, predicted_10_90)\n","plt.scatter(true_10_90, predicted_10_90, s=2 , alpha=0.6, label=f\"10% train, R squared = {np.corrcoef(true_10_90, predicted_10_90)[1,0]}\")\n","plt.legend()\n","\n","predicted_15_85 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/fifteen_eightyfive/predicted5.csv\")).HOMO\n","true_15_85 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/15_85_test.csv\")).HOMO\n","MAE_15_85 = mean_absolute_error(true_15_85, predicted_15_85)\n","plt.scatter(true_15_85, predicted_15_85, s=2 , alpha=0.6, label=f\"15% train, R squared = {np.corrcoef(true_15_85, predicted_15_85)[1,0]}\")\n","plt.legend()\n","\n","\n","predicted_20_80 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/twenty_eighty/predicted5.csv\")).HOMO\n","true_20_80 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/20_80_test.csv\")).HOMO\n","MAE_20_80 = mean_absolute_error(true_20_80, predicted_20_80)\n","\n","predicted_25_75 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/twentyfive_seventyfive/predicted5.csv\")).HOMO\n","true_25_75 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/25_75_test.csv\")).HOMO\n","MAE_25_75 = mean_absolute_error(true_25_75, predicted_25_75)\n","\n","predicted_30_70 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/thirty_seventy/predicted5.csv\")).HOMO\n","true_30_70 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/30_70_test.csv\")).HOMO\n","MAE_30_70 = mean_absolute_error(true_30_70, predicted_30_70)\n","\n","predicted_40_60 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/forty_sixty/predicted5.csv\")).HOMO\n","true_40_60 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/40_60_test.csv\")).HOMO\n","MAE_40_60 = mean_absolute_error(true_40_60, predicted_40_60)\n","\n","predicted_50_50 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/fifty_fifty/predicted5.csv\")).HOMO\n","true_50_50 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/50_50_test.csv\")).HOMO\n","MAE_50_50 = mean_absolute_error(true_50_50, predicted_50_50)\n","\n","predicted_60_40 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/sixty_forty/predicted5.csv\")).HOMO\n","true_60_40 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/60_40_test.csv\")).HOMO\n","MAE_60_40 = mean_absolute_error(true_60_40, predicted_60_40)\n","\n","predicted_70_30 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/seventy_thirty/predicted5.csv\")).HOMO\n","true_70_30 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/70_30_test.csv\")).HOMO\n","MAE_70_30 = mean_absolute_error(true_70_30, predicted_70_30)\n","\n","predicted_80_20 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/eighty_twenty/predicted5.csv\")).HOMO\n","true_80_20 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/80_20_test.csv\")).HOMO\n","MAE_80_20 = mean_absolute_error(true_80_20, predicted_80_20)\n","\n","predicted_90_10 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/ninety_ten/predicted5.csv\")).HOMO\n","true_90_10 = (pd.read_csv(\"gdrive/MyDrive/dataset/chemprop/learningcurve/90_10_test.csv\")).HOMO\n","MAE_90_10 = mean_absolute_error(true_90_10, predicted_90_10)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":267},"id":"Ss67ztAhbNor","executionInfo":{"status":"ok","timestamp":1677528324464,"user_tz":0,"elapsed":7001,"user":{"displayName":"Ted Pitman","userId":"14049291477165845436"}},"outputId":"6111554f-34c0-46df-e406-a941366af313"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}